{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _css from \"@emotion/css\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\ANJI_PROJECTS_FRONTEND\\\\eCampus\\\\components\\\\profile\\\\profile-modals\\\\phdModal.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport moment from \"moment\";\nimport Cookies from \"js-cookie\";\nimport * as STYLES from \"../../../components/General/modalStyles\";\nimport DatePicker from \"react-datepicker\";\nimport { useSnackbar } from \"react-simple-snackbar\";\nimport { updatePhdDetails } from \"../../../services/profileService\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar _ref = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxlQ2FtcHVzXFxjb21wb25lbnRzXFxwcm9maWxlXFxwcm9maWxlLW1vZGFsc1xccGhkTW9kYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEwyQiIsImZpbGUiOiJEOlxcQU5KSV9QUk9KRUNUU19GUk9OVEVORFxcZUNhbXB1c1xcY29tcG9uZW50c1xccHJvZmlsZVxccHJvZmlsZS1tb2RhbHNcXHBoZE1vZGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IGNzcyBmcm9tIFwiQGVtb3Rpb24vY3NzXCI7XHJcbmltcG9ydCB7IEZvcm1payB9IGZyb20gXCJmb3JtaWtcIjtcclxuaW1wb3J0ICogYXMgWXVwIGZyb20gXCJ5dXBcIjtcclxuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XHJcbmltcG9ydCBDb29raWVzIGZyb20gXCJqcy1jb29raWVcIjtcclxuaW1wb3J0ICogYXMgU1RZTEVTIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL0dlbmVyYWwvbW9kYWxTdHlsZXNcIjtcclxuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSBcInJlYWN0LWRhdGVwaWNrZXJcIjtcclxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwicmVhY3Qtc2ltcGxlLXNuYWNrYmFyXCI7XHJcbmltcG9ydCB7IHVwZGF0ZVBoZERldGFpbHMgfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZXMvcHJvZmlsZVNlcnZpY2VcIjtcclxuXHJcbmNvbnN0IFBoZE1vZGFsID0gKHsgY2xvc2VNb2RhbCwgaXNQSERkYXRhLCBsb2FkUGhJbmZvIH0pID0+IHtcclxuICBjb25zb2xlLmxvZyhcImlzUEhEZGF0YXNzc3NcIiwgaXNQSERkYXRhKTtcclxuICBjb25zdCBbc3RhcnREYXRlLCBzZXRTdGFydERhdGVdID0gdXNlU3RhdGUobmV3IERhdGUoKSk7XHJcbiAgY29uc3QgUHJvZmlsZUlkID0gQ29va2llcy5nZXQoXCJlbXBsb3llZUlEXCIpO1xyXG4gIGNvbnN0IFtvcGVuU25hY2tiYXIsIGNsb3NlU25hY2tiYXJdID0gdXNlU25hY2tiYXIoKTtcclxuICAvL1lVUCB2YWxpZGF0aW9uIHNjaGVtYVxyXG4gIGNvbnN0IHBoZFVwZGF0ZVNjaGVtYSA9IFl1cC5vYmplY3QoKS5zaGFwZSh7XHJcbiAgICByZXNlYXJjaFRpdGxlOiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIHVuaXZlcnNpdHk6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgcmVnaXN0ZXJlZFllYXI6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgcGhkc3RhdHVzOiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIGRhdGVBd2FyZDogWXVwLnN0cmluZygpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXHJcbiAgICBzdXBlcnZpc29yTmFtZTogWXVwLnN0cmluZygpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXHJcbiAgICBzdXBlcnZpc2lvbkFmZjogWXVwLnN0cmluZygpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXHJcbiAgICBkZXB0SWQ6IFl1cC5zdHJpbmcoKSxcclxuICAgIHBoZERldGFpbHNJZDogWXVwLnN0cmluZygpLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBzdGF0dXNJbmZvID0gW1wiQ29tcGxldGVkXCIsIFwiUHVyc3VpbmdcIl07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8U1RZTEVTLlBvcHVwTWFzaz5cclxuICAgICAgPFNUWUxFUy5Qb3B1cFdyYXBwZXI+XHJcbiAgICAgICAgPFNUWUxFUy5Qb3B1cFRpdGxlPlBoLkQgRGV0YWlsczwvU1RZTEVTLlBvcHVwVGl0bGU+XHJcbiAgICAgICAgPEZvcm1pa1xyXG4gICAgICAgICAgaW5pdGlhbFZhbHVlcz17e1xyXG4gICAgICAgICAgICByZXNlYXJjaFRpdGxlOiBpc1BIRGRhdGE/LnJlc2VhcmNoVGl0bGUsXHJcbiAgICAgICAgICAgIHVuaXZlcnNpdHk6IGlzUEhEZGF0YT8udW5pdmVyc2l0eSxcclxuICAgICAgICAgICAgcmVnaXN0ZXJlZFllYXI6IGlzUEhEZGF0YT8ucmVnaXN0ZXJlZFllYXIsXHJcbiAgICAgICAgICAgIHBoZHN0YXR1czogaXNQSERkYXRhPy5zdGF0dXMsXHJcbiAgICAgICAgICAgIGRhdGVBd2FyZDogaXNQSERkYXRhPy5kYXRlQXdhcmQsXHJcbiAgICAgICAgICAgIHN1cGVydmlzb3JOYW1lOiBpc1BIRGRhdGE/LnN1cGVydmlzaW9yTmFtZSxcclxuICAgICAgICAgICAgc3VwZXJ2aXNpb25BZmY6IGlzUEhEZGF0YT8uc3VwZXJ2aXNpb3JBZmZpbGlhdGlvbixcclxuICAgICAgICAgICAgZGVwdElkOiBpc1BIRGRhdGE/LmRlcGFydG1lbnQ/LmRlcGFydG1lbnRQcmltYXJ5SWQsXHJcbiAgICAgICAgICAgIHBoZERldGFpbHNJZDogaXNQSERkYXRhPy5waGREZXRhaWxzSUQsXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgdmFsaWRhdGlvblNjaGVtYT17cGhkVXBkYXRlU2NoZW1hfVxyXG4gICAgICAgICAgb25TdWJtaXQ9eyh2YWx1ZXMpID0+IHtcclxuICAgICAgICAgICAgdXBkYXRlUGhkRGV0YWlscyhQcm9maWxlSWQsIHZhbHVlcykudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBvcGVuU25hY2tiYXIoXCJQaC5EIERldGFpbHMgdXBkYXRlZCBzdWNjZXNzZnVsbHkuXCIpO1xyXG4gICAgICAgICAgICAgICAgbG9hZFBoSW5mbygpO1xyXG4gICAgICAgICAgICAgICAgY2xvc2VNb2RhbCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHsoe1xyXG4gICAgICAgICAgICB2YWx1ZXMsXHJcbiAgICAgICAgICAgIGVycm9ycyxcclxuICAgICAgICAgICAgdG91Y2hlZCxcclxuICAgICAgICAgICAgaGFuZGxlQ2hhbmdlLFxyXG4gICAgICAgICAgICBoYW5kbGVCbHVyLFxyXG4gICAgICAgICAgICBoYW5kbGVTdWJtaXQsXHJcbiAgICAgICAgICB9KSA9PiAoXHJcbiAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJmaXggbWItM1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTYvMTIgZmxvYXQtbGVmdCBwci0yXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicmVzZWFyY2hUaXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInJlc2VhcmNoVGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMucmVzZWFyY2hUaXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVGl0bGUgb2YgdGhlIFJlc2VhcmNoXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItMiBib3JkZXItc29saWQgcC0yIHJvdW5kZWQgdy1mdWxsIGZvY3VzOm91dGxpbmUtbm9uZSBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnJlc2VhcmNoVGl0bGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5yZXNlYXJjaFRpdGxlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5yZXNlYXJjaFRpdGxlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNi8xMiBmbG9hdC1sZWZ0IFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInVuaXZlcnNpdHlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ1bml2ZXJzaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLnVuaXZlcnNpdHl9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlVuaXZlcnNpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyIGJvcmRlci0yIGJvcmRlci1zb2xpZCBwLTIgcm91bmRlZCB3LWZ1bGwgZm9jdXM6b3V0bGluZS1ub25lIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMudW5pdmVyc2l0eSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLnVuaXZlcnNpdHkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnVuaXZlcnNpdHkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbGVhcmZpeCBtYi0zXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNi8xMiBmbG9hdC1sZWZ0IHByLTJcIj5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJyZWdpc3RlcmVkWWVhclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInJlZ2lzdGVyZWRZZWFyXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwicmVnaXN0ZXJlZFllYXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMucmVnaXN0ZXJlZFllYXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3JkZXIgYm9yZGVyLTIgYm9yZGVyLXNvbGlkIHAtMiByb3VuZGVkIHctZnVsbCBmb2N1czpvdXRsaW5lLW5vbmUgXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5yZWdpc3RlcmVkWWVhciAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLnJlZ2lzdGVyZWRZZWFyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5yZWdpc3RlcmVkWWVhciAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTYvMTIgZmxvYXQtbGVmdFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBoZHN0YXR1c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwaGRzdGF0dXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItMiBib3JkZXItc29saWQgcC0yIHJvdW5kZWQgdy1mdWxsIGZvY3VzOm91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucGhkc3RhdHVzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQucGhkc3RhdHVzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5waGRzdGF0dXMgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIHtzdGF0dXNJbmZvICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0luZm8ubWFwKChvcHQpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e29wdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnBoZHN0YXR1cyA9PT0gb3B0ID8gdmFsdWVzLnBoZHN0YXR1cyA6IG9wdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucGhkc3RhdHVzID09PSBvcHQgPyB2YWx1ZXMucGhkc3RhdHVzIDogb3B0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge29wdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIG10LTMgZmxvYXQtbGVmdFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImRhdGVBd2FyZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxEYXRlUGlja2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17c3RhcnREYXRlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhkYXRlKSA9PiBzZXRTdGFydERhdGUoZGF0ZSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmRhdGVBd2FyZH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImRhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImRhdGVBd2FyZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlcy5kYXRlQXdhcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImRhdGVBd2FyZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3JkZXIgYm9yZGVyLTIgYm9yZGVyLXNvbGlkIHAtMiByb3VuZGVkIHctZnVsbCBmb2N1czpvdXRsaW5lLW5vbmUgXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5kYXRlQXdhcmQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5kYXRlQXdhcmQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmRhdGVBd2FyZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyZml4IG1iLTNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy02LzEyIGZsb2F0LWxlZnQgcHItMlwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInN1cGVydmlzb3JOYW1lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwic3VwZXJ2aXNvck5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuc3VwZXJ2aXNvck5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInN1cGVydmlzb3JOYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItMiBib3JkZXItc29saWQgcC0yIHJvdW5kZWQgdy1mdWxsIGZvY3VzOm91dGxpbmUtbm9uZSBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnN1cGVydmlzb3JOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQuc3VwZXJ2aXNvck5hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnN1cGVydmlzb3JOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTYvMTIgZmxvYXQtbGVmdCBcIj5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzdXBlcnZpc2lvbkFmZlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInN1cGVydmlzaW9uQWZmXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLnN1cGVydmlzaW9uQWZmfVxyXG4gICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTdXBlcnZpc2lvcidzIEFmZmlsaWF0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItMiBib3JkZXItc29saWQgcC0yIHJvdW5kZWQgdy1mdWxsIGZvY3VzOm91dGxpbmUtbm9uZSBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnN1cGVydmlzaW9uQWZmICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQuc3VwZXJ2aXNpb25BZmYgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnN1cGVydmlzaW9uQWZmICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLWdyZWVuLTQwMCBweC0zIHB5LTIgcm91bmRlZCB0ZXh0LXdoaXRlXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgU2F2ZSBQaC5EIERldGFpbHNcclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17Y2xvc2VNb2RhbH1cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctYmxhY2sgcHgtMyBweS0yIG1sLTIgcm91bmRlZCB0ZXh0LXdoaXRlXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgQ2xvc2VcclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvRm9ybWlrPlxyXG4gICAgICA8L1NUWUxFUy5Qb3B1cFdyYXBwZXI+XHJcbiAgICA8L1NUWUxFUy5Qb3B1cE1hc2s+XHJcbiAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgUGhkTW9kYWw7XHJcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref6 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref7 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar PhdModal = function PhdModal(_ref8) {\n  _s();\n\n  var _isPHDdata$department;\n\n  var closeModal = _ref8.closeModal,\n      isPHDdata = _ref8.isPHDdata,\n      loadPhInfo = _ref8.loadPhInfo;\n  console.log(\"isPHDdatassss\", isPHDdata);\n\n  var _useState = useState(new Date()),\n      startDate = _useState[0],\n      setStartDate = _useState[1];\n\n  var ProfileId = Cookies.get(\"employeeID\");\n\n  var _useSnackbar = useSnackbar(),\n      _useSnackbar2 = _slicedToArray(_useSnackbar, 2),\n      openSnackbar = _useSnackbar2[0],\n      closeSnackbar = _useSnackbar2[1]; //YUP validation schema\n\n\n  var phdUpdateSchema = Yup.object().shape({\n    researchTitle: Yup.string().required(\"Required\"),\n    university: Yup.string().required(\"Required\"),\n    registeredYear: Yup.string().required(\"Required\"),\n    phdstatus: Yup.string().required(\"Required\"),\n    dateAward: Yup.string().required(\"Required\"),\n    supervisorName: Yup.string().required(\"Required\"),\n    supervisionAff: Yup.string().required(\"Required\"),\n    deptId: Yup.string(),\n    phdDetailsId: Yup.string()\n  });\n  var statusInfo = [\"Completed\", \"Pursuing\"];\n  return ___EmotionJSX(STYLES.PopupMask, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(STYLES.PopupWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(STYLES.PopupTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Ph.D Details\"), ___EmotionJSX(Formik, {\n    initialValues: {\n      researchTitle: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.researchTitle,\n      university: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.university,\n      registeredYear: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.registeredYear,\n      phdstatus: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.status,\n      dateAward: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.dateAward,\n      supervisorName: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.supervisiorName,\n      supervisionAff: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.supervisiorAffiliation,\n      deptId: isPHDdata === null || isPHDdata === void 0 ? void 0 : (_isPHDdata$department = isPHDdata.department) === null || _isPHDdata$department === void 0 ? void 0 : _isPHDdata$department.departmentPrimaryId,\n      phdDetailsId: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.phdDetailsID\n    },\n    validationSchema: phdUpdateSchema,\n    onSubmit: function onSubmit(values) {\n      updatePhdDetails(ProfileId, values).then(function (data) {\n        if (data) {\n          openSnackbar(\"Ph.D Details updated successfully.\");\n          loadPhInfo();\n          closeModal();\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, function (_ref9) {\n    var values = _ref9.values,\n        errors = _ref9.errors,\n        touched = _ref9.touched,\n        handleChange = _ref9.handleChange,\n        handleBlur = _ref9.handleBlur,\n        handleSubmit = _ref9.handleSubmit;\n    return ___EmotionJSX(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, ___EmotionJSX(\"div\", {\n      className: \"clearfix mb-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, ___EmotionJSX(\"div\", {\n      className: \"w-6/12 float-left pr-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"researchTitle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"text\",\n      name: \"researchTitle\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.researchTitle,\n      placeholder: \"Title of the Research\",\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n      css: errors.researchTitle && touched.researchTitle && errors.researchTitle && _ref7,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }))), ___EmotionJSX(\"div\", {\n      className: \"w-6/12 float-left \",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"university\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"text\",\n      name: \"university\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.university,\n      placeholder: \"University\",\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n      css: errors.university && touched.university && errors.university && _ref6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    })))), ___EmotionJSX(\"div\", {\n      className: \"clearfix mb-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, ___EmotionJSX(\"div\", {\n      className: \"w-6/12 float-left pr-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"registeredYear\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"text\",\n      name: \"registeredYear\",\n      placeholder: \"registeredYear\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.registeredYear,\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n      css: errors.registeredYear && touched.registeredYear && errors.registeredYear && _ref5,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }))), ___EmotionJSX(\"div\", {\n      className: \"w-6/12 float-left\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"phdstatus\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"select\", {\n      name: \"phdstatus\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none\",\n      css: errors.phdstatus && touched.phdstatus && errors.phdstatus && _ref4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, statusInfo && statusInfo.map(function (opt) {\n      return ___EmotionJSX(\"option\", {\n        key: opt,\n        value: values.phdstatus === opt ? values.phdstatus : opt,\n        selected: values.phdstatus === opt ? values.phdstatus : opt,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 27\n        }\n      }, opt);\n    })))), ___EmotionJSX(\"div\", {\n      className: \"w-full mt-3 float-left\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"dateAward\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(DatePicker, {\n      selected: startDate,\n      onChange: function onChange(date) {\n        return setStartDate(date);\n      },\n      value: values.dateAward,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }), ___EmotionJSX(\"input\", {\n      type: \"date\",\n      name: \"dateAward\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.dateAward,\n      placeholder: \"dateAward\",\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n      css: errors.dateAward && touched.dateAward && errors.dateAward && _ref3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    })))), ___EmotionJSX(\"div\", {\n      className: \"clearfix mb-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 15\n      }\n    }, ___EmotionJSX(\"div\", {\n      className: \"w-6/12 float-left pr-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"supervisorName\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"text\",\n      name: \"supervisorName\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.supervisorName,\n      placeholder: \"supervisorName\",\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n      css: errors.supervisorName && touched.supervisorName && errors.supervisorName && _ref2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }))), ___EmotionJSX(\"div\", {\n      className: \"w-6/12 float-left \",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"supervisionAff\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"text\",\n      name: \"supervisionAff\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.supervisionAff,\n      placeholder: \"Supervisior's Affiliation\",\n      className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n      css: errors.supervisionAff && touched.supervisionAff && errors.supervisionAff && _ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    })))), ___EmotionJSX(\"div\", {\n      className: \"float-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }, ___EmotionJSX(\"button\", {\n      type: \"submit\",\n      className: \"bg-green-400 px-3 py-2 rounded text-white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, \"Save Ph.D Details\"), ___EmotionJSX(\"button\", {\n      type: \"button\",\n      onClick: closeModal,\n      className: \"bg-black px-3 py-2 ml-2 rounded text-white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }, \"Close\")));\n  })));\n};\n\n_s(PhdModal, \"TjBMVONuAEB6TGwB5e8pD3i0dzM=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = PhdModal;\nexport default PhdModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhdModal\");","map":{"version":3,"sources":["D:/ANJI_PROJECTS_FRONTEND/eCampus/components/profile/profile-modals/phdModal.js"],"names":["React","useState","useEffect","Formik","Yup","moment","Cookies","STYLES","DatePicker","useSnackbar","updatePhdDetails","PhdModal","closeModal","isPHDdata","loadPhInfo","console","log","Date","startDate","setStartDate","ProfileId","get","openSnackbar","closeSnackbar","phdUpdateSchema","object","shape","researchTitle","string","required","university","registeredYear","phdstatus","dateAward","supervisorName","supervisionAff","deptId","phdDetailsId","statusInfo","status","supervisiorName","supervisiorAffiliation","department","departmentPrimaryId","phdDetailsID","values","then","data","errors","touched","handleChange","handleBlur","handleSubmit","map","opt","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport css from \"@emotion/css\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport Cookies from \"js-cookie\";\r\nimport * as STYLES from \"../../../components/General/modalStyles\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useSnackbar } from \"react-simple-snackbar\";\r\nimport { updatePhdDetails } from \"../../../services/profileService\";\r\n\r\nconst PhdModal = ({ closeModal, isPHDdata, loadPhInfo }) => {\r\n  console.log(\"isPHDdatassss\", isPHDdata);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const ProfileId = Cookies.get(\"employeeID\");\r\n  const [openSnackbar, closeSnackbar] = useSnackbar();\r\n  //YUP validation schema\r\n  const phdUpdateSchema = Yup.object().shape({\r\n    researchTitle: Yup.string().required(\"Required\"),\r\n    university: Yup.string().required(\"Required\"),\r\n    registeredYear: Yup.string().required(\"Required\"),\r\n    phdstatus: Yup.string().required(\"Required\"),\r\n    dateAward: Yup.string().required(\"Required\"),\r\n    supervisorName: Yup.string().required(\"Required\"),\r\n    supervisionAff: Yup.string().required(\"Required\"),\r\n    deptId: Yup.string(),\r\n    phdDetailsId: Yup.string(),\r\n  });\r\n\r\n  const statusInfo = [\"Completed\", \"Pursuing\"];\r\n\r\n  return (\r\n    <STYLES.PopupMask>\r\n      <STYLES.PopupWrapper>\r\n        <STYLES.PopupTitle>Ph.D Details</STYLES.PopupTitle>\r\n        <Formik\r\n          initialValues={{\r\n            researchTitle: isPHDdata?.researchTitle,\r\n            university: isPHDdata?.university,\r\n            registeredYear: isPHDdata?.registeredYear,\r\n            phdstatus: isPHDdata?.status,\r\n            dateAward: isPHDdata?.dateAward,\r\n            supervisorName: isPHDdata?.supervisiorName,\r\n            supervisionAff: isPHDdata?.supervisiorAffiliation,\r\n            deptId: isPHDdata?.department?.departmentPrimaryId,\r\n            phdDetailsId: isPHDdata?.phdDetailsID,\r\n          }}\r\n          validationSchema={phdUpdateSchema}\r\n          onSubmit={(values) => {\r\n            updatePhdDetails(ProfileId, values).then((data) => {\r\n              if (data) {\r\n                openSnackbar(\"Ph.D Details updated successfully.\");\r\n                loadPhInfo();\r\n                closeModal();\r\n              }\r\n            });\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"clearfix mb-3\">\r\n                <div className=\"w-6/12 float-left pr-2\">\r\n                  <label htmlFor=\"researchTitle\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"researchTitle\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.researchTitle}\r\n                      placeholder=\"Title of the Research\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.researchTitle &&\r\n                        touched.researchTitle &&\r\n                        errors.researchTitle &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"w-6/12 float-left \">\r\n                  <label htmlFor=\"university\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"university\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.university}\r\n                      placeholder=\"University\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.university &&\r\n                        touched.university &&\r\n                        errors.university &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"clearfix mb-3\">\r\n                <div className=\"w-6/12 float-left pr-2\">\r\n                  <label htmlFor=\"registeredYear\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"registeredYear\"\r\n                      placeholder=\"registeredYear\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.registeredYear}\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.registeredYear &&\r\n                        touched.registeredYear &&\r\n                        errors.registeredYear &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"w-6/12 float-left\">\r\n                  <label htmlFor=\"phdstatus\">\r\n                    <select\r\n                      name=\"phdstatus\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none\"\r\n                      css={\r\n                        errors.phdstatus &&\r\n                        touched.phdstatus &&\r\n                        errors.phdstatus &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    >\r\n                      {statusInfo &&\r\n                        statusInfo.map((opt) => (\r\n                          <option\r\n                            key={opt}\r\n                            value={\r\n                              values.phdstatus === opt ? values.phdstatus : opt\r\n                            }\r\n                            selected={\r\n                              values.phdstatus === opt ? values.phdstatus : opt\r\n                            }\r\n                          >\r\n                            {opt}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                  </label>\r\n                </div>\r\n                <div className=\"w-full mt-3 float-left\">\r\n                  <label htmlFor=\"dateAward\">\r\n                    <DatePicker\r\n                      selected={startDate}\r\n                      onChange={(date) => setStartDate(date)}\r\n                      value={values.dateAward}\r\n                    />\r\n                    <input\r\n                      type=\"date\"\r\n                      name=\"dateAward\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.dateAward}\r\n                      placeholder=\"dateAward\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.dateAward &&\r\n                        touched.dateAward &&\r\n                        errors.dateAward &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"clearfix mb-3\">\r\n                <div className=\"w-6/12 float-left pr-2\">\r\n                  <label htmlFor=\"supervisorName\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"supervisorName\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.supervisorName}\r\n                      placeholder=\"supervisorName\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.supervisorName &&\r\n                        touched.supervisorName &&\r\n                        errors.supervisorName &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n\r\n                <div className=\"w-6/12 float-left \">\r\n                  <label htmlFor=\"supervisionAff\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"supervisionAff\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.supervisionAff}\r\n                      placeholder=\"Supervisior's Affiliation\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.supervisionAff &&\r\n                        touched.supervisionAff &&\r\n                        errors.supervisionAff &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"float-right\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-green-400 px-3 py-2 rounded text-white\"\r\n                >\r\n                  Save Ph.D Details\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={closeModal}\r\n                  className=\"bg-black px-3 py-2 ml-2 rounded text-white\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </STYLES.PopupWrapper>\r\n    </STYLES.PopupMask>\r\n  );\r\n};\r\nexport default PhdModal;\r\n"]},"metadata":{},"sourceType":"module"}
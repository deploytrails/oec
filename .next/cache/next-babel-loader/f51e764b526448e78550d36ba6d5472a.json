{"ast":null,"code":"import _css from \"@emotion/css\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\ANJI_PROJECTS_FRONTEND\\\\OECFRONTEND\\\\components\\\\modals\\\\changePassword.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { COLORS } from \"../../constants\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { changePasswordService } from \"../../services/loginService\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar _ref = false ? {\n  name: \"ecl856-modals-ChangePassword\",\n  styles: \"margin-top:10px;& > button{font-weight:600;font-size:14px;padding-top:4px;color:black;text-align:right;display:block;position:absolute;top:0px;right:20px;top:10px;};label:modals-ChangePassword;\"\n} : {\n  name: \"ecl856-modals-ChangePassword\",\n  styles: \"margin-top:10px;& > button{font-weight:600;font-size:14px;padding-top:4px;color:black;text-align:right;display:block;position:absolute;top:0px;right:20px;top:10px;};label:modals-ChangePassword;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcbW9kYWxzXFxjaGFuZ2VQYXNzd29yZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtTjRCIiwiZmlsZSI6IkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcbW9kYWxzXFxjaGFuZ2VQYXNzd29yZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgY3NzIGZyb20gXCJAZW1vdGlvbi9jc3NcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IEZvcm1payB9IGZyb20gXCJmb3JtaWtcIjtcclxuaW1wb3J0ICogYXMgWXVwIGZyb20gXCJ5dXBcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgUHVsc2VMb2FkZXIgZnJvbSBcInJlYWN0LXNwaW5uZXJzL1B1bHNlTG9hZGVyXCI7XHJcbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWVcIjtcclxuaW1wb3J0IHsgZmFVc2VyLCBmYVRpbWVzIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5pbXBvcnQgeyBjaGFuZ2VQYXNzd29yZFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbG9naW5TZXJ2aWNlXCI7XHJcblxyXG5jb25zdCBDaGFuZ2VQYXNzd29yZCA9ICh7IG9wZW5DaGFuZ2VQYXNzTW9kYWwgfSkgPT4ge1xyXG4gIGNvbnN0IFtpc0NoYW5nZURhdGEsIHNldElzQ2hhbmdlRGF0YV0gPSB1c2VTdGF0ZSgpO1xyXG4gIGNvbnN0IFtpc0xvYWRlciwgc2V0SXNMb2FkZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IHJvdXRlID0gdXNlUm91dGVyKCk7XHJcbiAgLy9ZVVAgdmFsaWRhdGlvbiBzY2hlbWFcclxuICBjb25zdCBsb2dpblNjaGVtYSA9IFl1cC5vYmplY3QoKS5zaGFwZSh7XHJcbiAgICBjaGFuZ2VVc2VySUQ6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY2hhbmdlUGFzc3dvcmRPbGQ6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY2hhbmdlUGFzc3dvcmROZXc6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY29uZmlybVBhc3N3b3JkTmV3OiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIG9wZXJhdGlvbjogWXVwLnN0cmluZygpLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBnZXRDaGFuZ2VEYXRhID0gKGRhdGEpID0+IHtcclxuICAgIHNldElzQ2hhbmdlRGF0YShkYXRhKTtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIHNldElzTG9hZGVyKGZhbHNlKTtcclxuICAgIH1cclxuICAgIGlmIChkYXRhPy5kYXRhID09PSB0cnVlKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHJvdXRlLnJlbG9hZCgpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZml4ZWQgdG9wLTAgYm90dG9tLTAgbGVmdC0wIHJpZ2h0LTAgYmctYmxhY2sgYmctb3BhY2l0eS01MCB3LXNjcmVlbiBoLXNjcmVlblwiPlxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT1cInctNC8xMiBwLTYgYmctd2hpdGUgYWJzb2x1dGUgcm91bmRlZCBzaGFkb3ctMnhsXCJcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICB0b3A6IDUwJTtcclxuICAgICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgIGB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZvbnQtc2FucyBmb250LWJvbGQgdGV4dC1jZW50ZXIgXCI+Q2hhbmdlIFBhc3N3b3JkPC9oMz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxvY2sgbXQtNCBib3JkZXItdCBib3JkZXItZ3JheS00MDBcIj5cclxuICAgICAgICAgICAgPEZvcm1pa1xyXG4gICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e3tcclxuICAgICAgICAgICAgICAgIGNoYW5nZVVzZXJJRDogXCJcIixcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkT2xkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlUGFzc3dvcmROZXc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmROZXc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiY2hhbmdlUGFzc3dvcmRcIixcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25TY2hlbWE9e2xvZ2luU2NoZW1hfVxyXG4gICAgICAgICAgICAgIG9uU3VibWl0PXsodmFsdWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRlcih0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkU2VydmljZSh2YWx1ZXMpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgZ2V0Q2hhbmdlRGF0YShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7KHtcclxuICAgICAgICAgICAgICAgIHZhbHVlcyxcclxuICAgICAgICAgICAgICAgIGVycm9ycyxcclxuICAgICAgICAgICAgICAgIHRvdWNoZWQsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2UsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVCbHVyLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlU3VibWl0LFxyXG4gICAgICAgICAgICAgIH0pID0+IChcclxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9PlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNoYW5nZVVzZXJJRCByZWxhdGl2ZSBtYi00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2hhbmdlVXNlcklEXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgdXNlciBuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuY2hhbmdlVXNlcklEfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IG10LTYgYm94LWJvcmRlciBtdC00IHJvdW5kZWQgYm9yZGVyIGJvcmRlci1ncmF5LTQwMCBmb2N1czogb3V0bGluZS1ub25lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VVc2VySUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VVc2VySUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtDT0xPUlMuUkVEfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlJFRF9EQVJLRVJ9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7ZXJyb3JzLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlVXNlcklEfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaGFuZ2VQYXNzd29yZE9sZCByZWxhdGl2ZSBibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjaGFuZ2VQYXNzd29yZE9sZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgb2xkIHBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmNoYW5nZVBhc3N3b3JkT2xkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmRPbGQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VQYXNzd29yZE9sZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmRPbGQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jaGFuZ2VQYXNzd29yZE9sZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVBhc3N3b3JkT2xkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VQYXNzd29yZE9sZH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaGFuZ2VQYXNzd29yZE5ldyByZWxhdGl2ZSBibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjaGFuZ2VQYXNzd29yZE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgbmV3IHBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmNoYW5nZVBhc3N3b3JkTmV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VQYXNzd29yZE5ldyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jaGFuZ2VQYXNzd29yZE5ldyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VQYXNzd29yZE5ld31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY29uZmlybVBhc3N3b3JkTmV3IHJlbGF0aXZlIGJsb2NrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImNvbmZpcm1QYXNzd29yZE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbmZpcm0geW91ciBuZXcgcGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuY29uZmlybVBhc3N3b3JkTmV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY29uZmlybVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQuY29uZmlybVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmNvbmZpcm1QYXNzd29yZE5ld31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAge2lzQ2hhbmdlRGF0YSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGFuZ2VEYXRhLmRhdGEgPT09IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcInRleHQtcmVkLTUwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcInRleHQtZ3JlZW4tNTAwXCJcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7aXNDaGFuZ2VEYXRhLm1lc3NhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJibG9jayB3LTIwIG0tYXV0byBmb250LW1lZGl1bSAgYmctZ3JlZW4tNjAwIGZvY3VzOm91dGxpbmUtbm9uZSBweS0yIHB4LTQgdXBwZXJjYXNlIHJvdW5kZWQgc2hhZG93LTJ4bCB0ZXh0LXdoaXRlIG10LTQgaG92ZXI6YmctZ3JheS03MDBcIlxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge2lzTG9hZGVyID8gPFB1bHNlTG9hZGVyIHNpemU9XCI3XCIgY29sb3I9XCIjZmZmXCIgLz4gOiBcIlNhdmVcIn1cclxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmxpbmUtYmxvY2sgZmxvYXQtcmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICYgPiBidXR0b24ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvY3VzOm91dGxpbmUtbm9uZSBob3Zlcjp0ZXh0LWdyZWVuLTkwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvcGVuQ2hhbmdlUGFzc01vZGFsfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW1lc30gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC9Gb3JtaWs+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hhbmdlUGFzc3dvcmQ7XHJcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? {\n  name: \"17wscdo-modals-ChangePassword\",\n  styles: \"top:50%;left:50%;transform:translate(-50%,-50%);;label:modals-ChangePassword;\"\n} : {\n  name: \"17wscdo-modals-ChangePassword\",\n  styles: \"top:50%;left:50%;transform:translate(-50%,-50%);;label:modals-ChangePassword;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar ChangePassword = function ChangePassword(_ref3) {\n  _s();\n\n  var openChangePassModal = _ref3.openChangePassModal;\n\n  var _useState = useState(),\n      isChangeData = _useState[0],\n      setIsChangeData = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoader = _useState2[0],\n      setIsLoader = _useState2[1];\n\n  var route = useRouter(); //YUP validation schema\n\n  var loginSchema = Yup.object().shape({\n    changeUserID: Yup.string().required(\"Required\"),\n    changePasswordOld: Yup.string().required(\"Required\"),\n    changePasswordNew: Yup.string().required(\"Required\"),\n    confirmPasswordNew: Yup.string().required(\"Required\"),\n    operation: Yup.string()\n  });\n\n  var getChangeData = function getChangeData(data) {\n    setIsChangeData(data);\n\n    if (data) {\n      setIsLoader(false);\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.data) === true) {\n      setTimeout(function () {\n        route.reload();\n      }, 1000);\n    }\n\n    console.log(data);\n  };\n\n  return ___EmotionJSX(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(\"section\", {\n    className: \"fixed top-0 bottom-0 left-0 right-0 bg-black bg-opacity-50 w-screen h-screen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"w-4/12 p-6 bg-white absolute rounded shadow-2xl\",\n    css: _ref2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"h3\", {\n    className: \"font-sans font-bold text-center \",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Change Password\"), ___EmotionJSX(\"div\", {\n    className: \"block mt-4 border-t border-gray-400\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Formik, {\n    initialValues: {\n      changeUserID: \"\",\n      changePasswordOld: \"\",\n      changePasswordNew: \"\",\n      confirmPasswordNew: \"\",\n      operation: \"changePassword\"\n    },\n    validationSchema: loginSchema,\n    onSubmit: function onSubmit(values) {\n      setIsLoader(true);\n      changePasswordService(values).then(function (data) {\n        getChangeData(data);\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        errors = _ref4.errors,\n        touched = _ref4.touched,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        handleSubmit = _ref4.handleSubmit;\n    return ___EmotionJSX(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, ___EmotionJSX(\"label\", {\n      htmlFor: \"changeUserID relative mb-4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"text\",\n      name: \"changeUserID\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      placeholder: \"Enter your user name\",\n      value: values.changeUserID,\n      className: \"block w-full text-black py-2 px-4 mt-6 box-border mt-4 rounded border border-gray-400 focus: outline-none\",\n      css: errors.changeUserID && touched.changeUserID && errors.changeUserID && /*#__PURE__*/_css(\"border:1px solid \", COLORS.RED, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }), ___EmotionJSX(\"div\", {\n      css: /*#__PURE__*/_css(\"font-size:14px;color:\", COLORS.RED_DARKER, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, errors.changeUserID && touched.changeUserID && errors.changeUserID)), ___EmotionJSX(\"label\", {\n      htmlFor: \"changePasswordOld relative block\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"password\",\n      name: \"changePasswordOld\",\n      placeholder: \"Enter your old password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.changePasswordOld,\n      className: \"block w-full text-black py-2 px-4 box-border mt-4 rounded border border-gray-400 focus: outline-none\",\n      css: errors.changePasswordOld && touched.changePasswordOld && errors.changePasswordOld && /*#__PURE__*/_css(\"border:1px solid \", COLORS.RED, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcbW9kYWxzXFxjaGFuZ2VQYXNzd29yZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxSDJCIiwiZmlsZSI6IkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcbW9kYWxzXFxjaGFuZ2VQYXNzd29yZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgY3NzIGZyb20gXCJAZW1vdGlvbi9jc3NcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IEZvcm1payB9IGZyb20gXCJmb3JtaWtcIjtcclxuaW1wb3J0ICogYXMgWXVwIGZyb20gXCJ5dXBcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgUHVsc2VMb2FkZXIgZnJvbSBcInJlYWN0LXNwaW5uZXJzL1B1bHNlTG9hZGVyXCI7XHJcbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWVcIjtcclxuaW1wb3J0IHsgZmFVc2VyLCBmYVRpbWVzIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5pbXBvcnQgeyBjaGFuZ2VQYXNzd29yZFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbG9naW5TZXJ2aWNlXCI7XHJcblxyXG5jb25zdCBDaGFuZ2VQYXNzd29yZCA9ICh7IG9wZW5DaGFuZ2VQYXNzTW9kYWwgfSkgPT4ge1xyXG4gIGNvbnN0IFtpc0NoYW5nZURhdGEsIHNldElzQ2hhbmdlRGF0YV0gPSB1c2VTdGF0ZSgpO1xyXG4gIGNvbnN0IFtpc0xvYWRlciwgc2V0SXNMb2FkZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IHJvdXRlID0gdXNlUm91dGVyKCk7XHJcbiAgLy9ZVVAgdmFsaWRhdGlvbiBzY2hlbWFcclxuICBjb25zdCBsb2dpblNjaGVtYSA9IFl1cC5vYmplY3QoKS5zaGFwZSh7XHJcbiAgICBjaGFuZ2VVc2VySUQ6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY2hhbmdlUGFzc3dvcmRPbGQ6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY2hhbmdlUGFzc3dvcmROZXc6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY29uZmlybVBhc3N3b3JkTmV3OiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIG9wZXJhdGlvbjogWXVwLnN0cmluZygpLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBnZXRDaGFuZ2VEYXRhID0gKGRhdGEpID0+IHtcclxuICAgIHNldElzQ2hhbmdlRGF0YShkYXRhKTtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIHNldElzTG9hZGVyKGZhbHNlKTtcclxuICAgIH1cclxuICAgIGlmIChkYXRhPy5kYXRhID09PSB0cnVlKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHJvdXRlLnJlbG9hZCgpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZml4ZWQgdG9wLTAgYm90dG9tLTAgbGVmdC0wIHJpZ2h0LTAgYmctYmxhY2sgYmctb3BhY2l0eS01MCB3LXNjcmVlbiBoLXNjcmVlblwiPlxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT1cInctNC8xMiBwLTYgYmctd2hpdGUgYWJzb2x1dGUgcm91bmRlZCBzaGFkb3ctMnhsXCJcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICB0b3A6IDUwJTtcclxuICAgICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgIGB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZvbnQtc2FucyBmb250LWJvbGQgdGV4dC1jZW50ZXIgXCI+Q2hhbmdlIFBhc3N3b3JkPC9oMz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxvY2sgbXQtNCBib3JkZXItdCBib3JkZXItZ3JheS00MDBcIj5cclxuICAgICAgICAgICAgPEZvcm1pa1xyXG4gICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e3tcclxuICAgICAgICAgICAgICAgIGNoYW5nZVVzZXJJRDogXCJcIixcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkT2xkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlUGFzc3dvcmROZXc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmROZXc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiY2hhbmdlUGFzc3dvcmRcIixcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25TY2hlbWE9e2xvZ2luU2NoZW1hfVxyXG4gICAgICAgICAgICAgIG9uU3VibWl0PXsodmFsdWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRlcih0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkU2VydmljZSh2YWx1ZXMpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgZ2V0Q2hhbmdlRGF0YShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7KHtcclxuICAgICAgICAgICAgICAgIHZhbHVlcyxcclxuICAgICAgICAgICAgICAgIGVycm9ycyxcclxuICAgICAgICAgICAgICAgIHRvdWNoZWQsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2UsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVCbHVyLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlU3VibWl0LFxyXG4gICAgICAgICAgICAgIH0pID0+IChcclxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9PlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNoYW5nZVVzZXJJRCByZWxhdGl2ZSBtYi00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2hhbmdlVXNlcklEXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgdXNlciBuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuY2hhbmdlVXNlcklEfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IG10LTYgYm94LWJvcmRlciBtdC00IHJvdW5kZWQgYm9yZGVyIGJvcmRlci1ncmF5LTQwMCBmb2N1czogb3V0bGluZS1ub25lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VVc2VySUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VVc2VySUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtDT0xPUlMuUkVEfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlJFRF9EQVJLRVJ9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7ZXJyb3JzLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlVXNlcklEfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaGFuZ2VQYXNzd29yZE9sZCByZWxhdGl2ZSBibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjaGFuZ2VQYXNzd29yZE9sZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgb2xkIHBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmNoYW5nZVBhc3N3b3JkT2xkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmRPbGQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VQYXNzd29yZE9sZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmRPbGQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jaGFuZ2VQYXNzd29yZE9sZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVBhc3N3b3JkT2xkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VQYXNzd29yZE9sZH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaGFuZ2VQYXNzd29yZE5ldyByZWxhdGl2ZSBibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjaGFuZ2VQYXNzd29yZE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgbmV3IHBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmNoYW5nZVBhc3N3b3JkTmV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VQYXNzd29yZE5ldyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jaGFuZ2VQYXNzd29yZE5ldyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VQYXNzd29yZE5ld31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY29uZmlybVBhc3N3b3JkTmV3IHJlbGF0aXZlIGJsb2NrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImNvbmZpcm1QYXNzd29yZE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbmZpcm0geW91ciBuZXcgcGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuY29uZmlybVBhc3N3b3JkTmV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY29uZmlybVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQuY29uZmlybVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmNvbmZpcm1QYXNzd29yZE5ld31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAge2lzQ2hhbmdlRGF0YSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGFuZ2VEYXRhLmRhdGEgPT09IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcInRleHQtcmVkLTUwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcInRleHQtZ3JlZW4tNTAwXCJcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7aXNDaGFuZ2VEYXRhLm1lc3NhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJibG9jayB3LTIwIG0tYXV0byBmb250LW1lZGl1bSAgYmctZ3JlZW4tNjAwIGZvY3VzOm91dGxpbmUtbm9uZSBweS0yIHB4LTQgdXBwZXJjYXNlIHJvdW5kZWQgc2hhZG93LTJ4bCB0ZXh0LXdoaXRlIG10LTQgaG92ZXI6YmctZ3JheS03MDBcIlxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge2lzTG9hZGVyID8gPFB1bHNlTG9hZGVyIHNpemU9XCI3XCIgY29sb3I9XCIjZmZmXCIgLz4gOiBcIlNhdmVcIn1cclxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmxpbmUtYmxvY2sgZmxvYXQtcmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICYgPiBidXR0b24ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvY3VzOm91dGxpbmUtbm9uZSBob3Zlcjp0ZXh0LWdyZWVuLTkwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvcGVuQ2hhbmdlUGFzc01vZGFsfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW1lc30gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC9Gb3JtaWs+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hhbmdlUGFzc3dvcmQ7XHJcbiJdfQ== */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }), ___EmotionJSX(\"div\", {\n      css: /*#__PURE__*/_css(\"font-size:14px;color:\", COLORS.RED_DARKER, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, errors.changePasswordOld && touched.changePasswordOld && errors.changePasswordOld)), ___EmotionJSX(\"label\", {\n      htmlFor: \"changePasswordNew relative block\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"password\",\n      name: \"changePasswordNew\",\n      placeholder: \"Enter your new password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.changePasswordNew,\n      className: \"block w-full text-black py-2 px-4 box-border mt-4 rounded border border-gray-400 focus: outline-none\",\n      css: errors.changePasswordNew && touched.changePasswordNew && errors.changePasswordNew && /*#__PURE__*/_css(\"border:1px solid \", COLORS.RED, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }), ___EmotionJSX(\"div\", {\n      css: /*#__PURE__*/_css(\"font-size:14px;color:\", COLORS.RED_DARKER, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, errors.changePasswordNew && touched.changePasswordNew && errors.changePasswordNew)), ___EmotionJSX(\"label\", {\n      htmlFor: \"confirmPasswordNew relative block\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"input\", {\n      type: \"password\",\n      name: \"confirmPasswordNew\",\n      placeholder: \"Confirm your new password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.confirmPasswordNew,\n      className: \"block w-full text-black py-2 px-4 box-border mt-4 rounded border border-gray-400 focus: outline-none\",\n      css: errors.confirmPasswordNew && touched.confirmPasswordNew && errors.confirmPasswordNew && /*#__PURE__*/_css(\"border:1px solid \", COLORS.RED, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcbW9kYWxzXFxjaGFuZ2VQYXNzd29yZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnTDJCIiwiZmlsZSI6IkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcbW9kYWxzXFxjaGFuZ2VQYXNzd29yZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgY3NzIGZyb20gXCJAZW1vdGlvbi9jc3NcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IEZvcm1payB9IGZyb20gXCJmb3JtaWtcIjtcclxuaW1wb3J0ICogYXMgWXVwIGZyb20gXCJ5dXBcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgUHVsc2VMb2FkZXIgZnJvbSBcInJlYWN0LXNwaW5uZXJzL1B1bHNlTG9hZGVyXCI7XHJcbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWVcIjtcclxuaW1wb3J0IHsgZmFVc2VyLCBmYVRpbWVzIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5pbXBvcnQgeyBjaGFuZ2VQYXNzd29yZFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbG9naW5TZXJ2aWNlXCI7XHJcblxyXG5jb25zdCBDaGFuZ2VQYXNzd29yZCA9ICh7IG9wZW5DaGFuZ2VQYXNzTW9kYWwgfSkgPT4ge1xyXG4gIGNvbnN0IFtpc0NoYW5nZURhdGEsIHNldElzQ2hhbmdlRGF0YV0gPSB1c2VTdGF0ZSgpO1xyXG4gIGNvbnN0IFtpc0xvYWRlciwgc2V0SXNMb2FkZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IHJvdXRlID0gdXNlUm91dGVyKCk7XHJcbiAgLy9ZVVAgdmFsaWRhdGlvbiBzY2hlbWFcclxuICBjb25zdCBsb2dpblNjaGVtYSA9IFl1cC5vYmplY3QoKS5zaGFwZSh7XHJcbiAgICBjaGFuZ2VVc2VySUQ6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY2hhbmdlUGFzc3dvcmRPbGQ6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY2hhbmdlUGFzc3dvcmROZXc6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgY29uZmlybVBhc3N3b3JkTmV3OiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIG9wZXJhdGlvbjogWXVwLnN0cmluZygpLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBnZXRDaGFuZ2VEYXRhID0gKGRhdGEpID0+IHtcclxuICAgIHNldElzQ2hhbmdlRGF0YShkYXRhKTtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIHNldElzTG9hZGVyKGZhbHNlKTtcclxuICAgIH1cclxuICAgIGlmIChkYXRhPy5kYXRhID09PSB0cnVlKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHJvdXRlLnJlbG9hZCgpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZml4ZWQgdG9wLTAgYm90dG9tLTAgbGVmdC0wIHJpZ2h0LTAgYmctYmxhY2sgYmctb3BhY2l0eS01MCB3LXNjcmVlbiBoLXNjcmVlblwiPlxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT1cInctNC8xMiBwLTYgYmctd2hpdGUgYWJzb2x1dGUgcm91bmRlZCBzaGFkb3ctMnhsXCJcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICB0b3A6IDUwJTtcclxuICAgICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgIGB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZvbnQtc2FucyBmb250LWJvbGQgdGV4dC1jZW50ZXIgXCI+Q2hhbmdlIFBhc3N3b3JkPC9oMz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxvY2sgbXQtNCBib3JkZXItdCBib3JkZXItZ3JheS00MDBcIj5cclxuICAgICAgICAgICAgPEZvcm1pa1xyXG4gICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e3tcclxuICAgICAgICAgICAgICAgIGNoYW5nZVVzZXJJRDogXCJcIixcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkT2xkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlUGFzc3dvcmROZXc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmROZXc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiY2hhbmdlUGFzc3dvcmRcIixcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25TY2hlbWE9e2xvZ2luU2NoZW1hfVxyXG4gICAgICAgICAgICAgIG9uU3VibWl0PXsodmFsdWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRlcih0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkU2VydmljZSh2YWx1ZXMpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgZ2V0Q2hhbmdlRGF0YShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7KHtcclxuICAgICAgICAgICAgICAgIHZhbHVlcyxcclxuICAgICAgICAgICAgICAgIGVycm9ycyxcclxuICAgICAgICAgICAgICAgIHRvdWNoZWQsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2UsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVCbHVyLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlU3VibWl0LFxyXG4gICAgICAgICAgICAgIH0pID0+IChcclxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9PlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNoYW5nZVVzZXJJRCByZWxhdGl2ZSBtYi00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2hhbmdlVXNlcklEXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgdXNlciBuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuY2hhbmdlVXNlcklEfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IG10LTYgYm94LWJvcmRlciBtdC00IHJvdW5kZWQgYm9yZGVyIGJvcmRlci1ncmF5LTQwMCBmb2N1czogb3V0bGluZS1ub25lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VVc2VySUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VVc2VySUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtDT0xPUlMuUkVEfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlJFRF9EQVJLRVJ9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7ZXJyb3JzLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVVzZXJJRCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlVXNlcklEfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaGFuZ2VQYXNzd29yZE9sZCByZWxhdGl2ZSBibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjaGFuZ2VQYXNzd29yZE9sZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgb2xkIHBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmNoYW5nZVBhc3N3b3JkT2xkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmRPbGQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VQYXNzd29yZE9sZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmRPbGQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jaGFuZ2VQYXNzd29yZE9sZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVBhc3N3b3JkT2xkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VQYXNzd29yZE9sZH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaGFuZ2VQYXNzd29yZE5ldyByZWxhdGl2ZSBibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjaGFuZ2VQYXNzd29yZE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgbmV3IHBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzLmNoYW5nZVBhc3N3b3JkTmV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jaGFuZ2VQYXNzd29yZE5ldyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY2hhbmdlUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jaGFuZ2VQYXNzd29yZE5ldyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkLmNoYW5nZVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jaGFuZ2VQYXNzd29yZE5ld31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY29uZmlybVBhc3N3b3JkTmV3IHJlbGF0aXZlIGJsb2NrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImNvbmZpcm1QYXNzd29yZE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbmZpcm0geW91ciBuZXcgcGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMuY29uZmlybVBhc3N3b3JkTmV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgdy1mdWxsIHRleHQtYmxhY2sgcHktMiBweC00IGJveC1ib3JkZXIgbXQtNCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JheS00MDAgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuY29uZmlybVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQuY29uZmlybVBhc3N3b3JkTmV3ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5jb25maXJtUGFzc3dvcmROZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmNvbmZpcm1QYXNzd29yZE5ld31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAge2lzQ2hhbmdlRGF0YSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDaGFuZ2VEYXRhLmRhdGEgPT09IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcInRleHQtcmVkLTUwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcInRleHQtZ3JlZW4tNTAwXCJcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7aXNDaGFuZ2VEYXRhLm1lc3NhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJibG9jayB3LTIwIG0tYXV0byBmb250LW1lZGl1bSAgYmctZ3JlZW4tNjAwIGZvY3VzOm91dGxpbmUtbm9uZSBweS0yIHB4LTQgdXBwZXJjYXNlIHJvdW5kZWQgc2hhZG93LTJ4bCB0ZXh0LXdoaXRlIG10LTQgaG92ZXI6YmctZ3JheS03MDBcIlxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge2lzTG9hZGVyID8gPFB1bHNlTG9hZGVyIHNpemU9XCI3XCIgY29sb3I9XCIjZmZmXCIgLz4gOiBcIlNhdmVcIn1cclxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmxpbmUtYmxvY2sgZmxvYXQtcmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICYgPiBidXR0b24ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvY3VzOm91dGxpbmUtbm9uZSBob3Zlcjp0ZXh0LWdyZWVuLTkwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvcGVuQ2hhbmdlUGFzc01vZGFsfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW1lc30gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC9Gb3JtaWs+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hhbmdlUGFzc3dvcmQ7XHJcbiJdfQ== */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }), ___EmotionJSX(\"div\", {\n      css: /*#__PURE__*/_css(\"font-size:14px;color:\", COLORS.RED_DARKER, \";;label:modals-ChangePassword;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, errors.confirmPasswordNew && touched.confirmPasswordNew && errors.confirmPasswordNew)), isChangeData && ___EmotionJSX(\"div\", {\n      className: isChangeData.data === false ? \"text-red-500\" : \"text-green-500\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }, isChangeData.message), ___EmotionJSX(\"button\", {\n      type: \"submit\",\n      className: \"block w-20 m-auto font-medium  bg-green-600 focus:outline-none py-2 px-4 uppercase rounded shadow-2xl text-white mt-4 hover:bg-gray-700\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 19\n      }\n    }, isLoader ? ___EmotionJSX(PulseLoader, {\n      size: \"7\",\n      color: \"#fff\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 33\n      }\n    }) : \"Save\"), ___EmotionJSX(\"div\", {\n      className: \"inline-block float-right\",\n      css: _ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    }, ___EmotionJSX(\"button\", {\n      type: \"button\",\n      className: \"focus:outline-none hover:text-green-900\",\n      onClick: openChangePassModal,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }\n    }, ___EmotionJSX(FontAwesomeIcon, {\n      icon: faTimes,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 23\n      }\n    }))));\n  })))));\n};\n\n_s(ChangePassword, \"MdLiRw1yeIwVLBpGlNshLRcdbdQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["D:/ANJI_PROJECTS_FRONTEND/OECFRONTEND/components/modals/changePassword.js"],"names":["React","useState","useRouter","Formik","Yup","COLORS","PulseLoader","FontAwesomeIcon","faUser","faTimes","changePasswordService","ChangePassword","openChangePassModal","isChangeData","setIsChangeData","isLoader","setIsLoader","route","loginSchema","object","shape","changeUserID","string","required","changePasswordOld","changePasswordNew","confirmPasswordNew","operation","getChangeData","data","setTimeout","reload","console","log","values","then","errors","touched","handleChange","handleBlur","handleSubmit","RED","RED_DARKER","message"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport css from \"@emotion/css\";\r\nimport { useRouter } from \"next/router\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { COLORS } from \"../../constants\";\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUser, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { changePasswordService } from \"../../services/loginService\";\r\n\r\nconst ChangePassword = ({ openChangePassModal }) => {\r\n  const [isChangeData, setIsChangeData] = useState();\r\n  const [isLoader, setIsLoader] = useState(false);\r\n  const route = useRouter();\r\n  //YUP validation schema\r\n  const loginSchema = Yup.object().shape({\r\n    changeUserID: Yup.string().required(\"Required\"),\r\n    changePasswordOld: Yup.string().required(\"Required\"),\r\n    changePasswordNew: Yup.string().required(\"Required\"),\r\n    confirmPasswordNew: Yup.string().required(\"Required\"),\r\n    operation: Yup.string(),\r\n  });\r\n\r\n  const getChangeData = (data) => {\r\n    setIsChangeData(data);\r\n    if (data) {\r\n      setIsLoader(false);\r\n    }\r\n    if (data?.data === true) {\r\n      setTimeout(() => {\r\n        route.reload();\r\n      }, 1000);\r\n    }\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"fixed top-0 bottom-0 left-0 right-0 bg-black bg-opacity-50 w-screen h-screen\">\r\n        <div\r\n          className=\"w-4/12 p-6 bg-white absolute rounded shadow-2xl\"\r\n          css={css`\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n          `}\r\n        >\r\n          <h3 className=\"font-sans font-bold text-center \">Change Password</h3>\r\n          <div className=\"block mt-4 border-t border-gray-400\">\r\n            <Formik\r\n              initialValues={{\r\n                changeUserID: \"\",\r\n                changePasswordOld: \"\",\r\n                changePasswordNew: \"\",\r\n                confirmPasswordNew: \"\",\r\n                operation: \"changePassword\",\r\n              }}\r\n              validationSchema={loginSchema}\r\n              onSubmit={(values) => {\r\n                setIsLoader(true);\r\n                changePasswordService(values).then((data) => {\r\n                  getChangeData(data);\r\n                });\r\n              }}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                  <label htmlFor=\"changeUserID relative mb-4\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"changeUserID\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      placeholder=\"Enter your user name\"\r\n                      value={values.changeUserID}\r\n                      className=\"block w-full text-black py-2 px-4 mt-6 box-border mt-4 rounded border border-gray-400 focus: outline-none\"\r\n                      css={\r\n                        errors.changeUserID &&\r\n                        touched.changeUserID &&\r\n                        errors.changeUserID &&\r\n                        css`\r\n                          border: 1px solid ${COLORS.RED};\r\n                        `\r\n                      }\r\n                    />\r\n                    <div\r\n                      css={css`\r\n                        font-size: 14px;\r\n                        color: ${COLORS.RED_DARKER};\r\n                      `}\r\n                    >\r\n                      {errors.changeUserID &&\r\n                        touched.changeUserID &&\r\n                        errors.changeUserID}\r\n                    </div>\r\n                  </label>\r\n\r\n                  <label htmlFor=\"changePasswordOld relative block\">\r\n                    <input\r\n                      type=\"password\"\r\n                      name=\"changePasswordOld\"\r\n                      placeholder=\"Enter your old password\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.changePasswordOld}\r\n                      className=\"block w-full text-black py-2 px-4 box-border mt-4 rounded border border-gray-400 focus: outline-none\"\r\n                      css={\r\n                        errors.changePasswordOld &&\r\n                        touched.changePasswordOld &&\r\n                        errors.changePasswordOld &&\r\n                        css`\r\n                          border: 1px solid ${COLORS.RED};\r\n                        `\r\n                      }\r\n                    />\r\n                    <div\r\n                      css={css`\r\n                        font-size: 14px;\r\n                        color: ${COLORS.RED_DARKER};\r\n                      `}\r\n                    >\r\n                      {errors.changePasswordOld &&\r\n                        touched.changePasswordOld &&\r\n                        errors.changePasswordOld}\r\n                    </div>\r\n                  </label>\r\n                  <label htmlFor=\"changePasswordNew relative block\">\r\n                    <input\r\n                      type=\"password\"\r\n                      name=\"changePasswordNew\"\r\n                      placeholder=\"Enter your new password\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.changePasswordNew}\r\n                      className=\"block w-full text-black py-2 px-4 box-border mt-4 rounded border border-gray-400 focus: outline-none\"\r\n                      css={\r\n                        errors.changePasswordNew &&\r\n                        touched.changePasswordNew &&\r\n                        errors.changePasswordNew &&\r\n                        css`\r\n                          border: 1px solid ${COLORS.RED};\r\n                        `\r\n                      }\r\n                    />\r\n                    <div\r\n                      css={css`\r\n                        font-size: 14px;\r\n                        color: ${COLORS.RED_DARKER};\r\n                      `}\r\n                    >\r\n                      {errors.changePasswordNew &&\r\n                        touched.changePasswordNew &&\r\n                        errors.changePasswordNew}\r\n                    </div>\r\n                  </label>\r\n\r\n                  <label htmlFor=\"confirmPasswordNew relative block\">\r\n                    <input\r\n                      type=\"password\"\r\n                      name=\"confirmPasswordNew\"\r\n                      placeholder=\"Confirm your new password\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.confirmPasswordNew}\r\n                      className=\"block w-full text-black py-2 px-4 box-border mt-4 rounded border border-gray-400 focus: outline-none\"\r\n                      css={\r\n                        errors.confirmPasswordNew &&\r\n                        touched.confirmPasswordNew &&\r\n                        errors.confirmPasswordNew &&\r\n                        css`\r\n                          border: 1px solid ${COLORS.RED};\r\n                        `\r\n                      }\r\n                    />\r\n                    <div\r\n                      css={css`\r\n                        font-size: 14px;\r\n                        color: ${COLORS.RED_DARKER};\r\n                      `}\r\n                    >\r\n                      {errors.confirmPasswordNew &&\r\n                        touched.confirmPasswordNew &&\r\n                        errors.confirmPasswordNew}\r\n                    </div>\r\n                  </label>\r\n                  {isChangeData && (\r\n                    <div\r\n                      className={\r\n                        isChangeData.data === false\r\n                          ? \"text-red-500\"\r\n                          : \"text-green-500\"\r\n                      }\r\n                    >\r\n                      {isChangeData.message}\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"block w-20 m-auto font-medium  bg-green-600 focus:outline-none py-2 px-4 uppercase rounded shadow-2xl text-white mt-4 hover:bg-gray-700\"\r\n                  >\r\n                    {isLoader ? <PulseLoader size=\"7\" color=\"#fff\" /> : \"Save\"}\r\n                  </button>\r\n                  <div\r\n                    className=\"inline-block float-right\"\r\n                    css={css`\r\n                      margin-top: 10px;\r\n                      & > button {\r\n                        font-weight: 600;\r\n                        font-size: 14px;\r\n                        padding-top: 4px;\r\n                        color: black;\r\n                        text-align: right;\r\n                        display: block;\r\n                        position: absolute;\r\n                        top: 0px;\r\n                        right: 20px;\r\n                        top: 10px;\r\n                      }\r\n                    `}\r\n                  >\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"focus:outline-none hover:text-green-900\"\r\n                      onClick={openChangePassModal}\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimes} />\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ANJI_PROJECTS_FRONTEND\\\\eCampus\\\\components\\\\sidenav\\\\sideNavLinks.js\";\nvar __jsx = React.createElement;\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport { css } from \"@emotion/core\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { COLORS } from \"../../constants\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faColumns, faFileImport, faNotesMedical, faBook, faBell, faUser, faList, faIdBadge, faCalendar, faKeyboard, faChartBar, faPhone, faTint, faChevronCircleRight, faArrowRight, faChevronRight, faPeopleArrows, faHandPaper, faPaperclip, faNewspaper, faCertificate, faEdit, faGraduationCap, faCompressArrowsAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar _ref = false ? {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxlQ2FtcHVzXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0t5QiIsImZpbGUiOiJEOlxcQU5KSV9QUk9KRUNUU19GUk9OVEVORFxcZUNhbXB1c1xcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZVwiO1xyXG5pbXBvcnQge1xyXG4gIGZhQ29sdW1ucyxcclxuICBmYUZpbGVJbXBvcnQsXHJcbiAgZmFOb3Rlc01lZGljYWwsXHJcbiAgZmFCb29rLFxyXG4gIGZhQmVsbCxcclxuICBmYVVzZXIsXHJcbiAgZmFMaXN0LFxyXG4gIGZhSWRCYWRnZSxcclxuICBmYUNhbGVuZGFyLFxyXG4gIGZhS2V5Ym9hcmQsXHJcbiAgZmFDaGFydEJhcixcclxuICBmYVBob25lLFxyXG4gIGZhVGludCxcclxuICBmYUNoZXZyb25DaXJjbGVSaWdodCxcclxuICBmYUFycm93UmlnaHQsXHJcbiAgZmFDaGV2cm9uUmlnaHQsXHJcbiAgZmFQZW9wbGVBcnJvd3MsXHJcbiAgZmFIYW5kUGFwZXIsXHJcbiAgZmFQYXBlcmNsaXAsXHJcbiAgZmFOZXdzcGFwZXIsXHJcbiAgZmFDZXJ0aWZpY2F0ZSxcclxuICBmYUVkaXQsXHJcbiAgZmFHcmFkdWF0aW9uQ2FwLFxyXG4gIGZhQ29tcHJlc3NBcnJvd3NBbHQsXHJcbn0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5cclxuY29uc3QgU2lkZU5hdkxpbmtzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IFtkcm9wTWVudSwgc2V0RHJvcE1lbnVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFttZW50ZXJNZW51LCBzZXRNZW50ZXJNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlQWxsb0NvdXJjZU1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXREcm9wTWVudSghZHJvcE1lbnUpO1xyXG4gIH07XHJcbiAgY29uc3QgdG9nZ2xlbWVudG9yTWVudSA9ICgpID0+IHtcclxuICAgIHNldE1lbnRlck1lbnUoIW1lbnRlck1lbnUpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgIDx1bFxyXG4gICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxOTBweCk7XHJcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgICAgICAgcGFkZGluZzogMTBweCA0MHB4IDEwcHggNDBweDtcclxuICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAmID4gbGkgPiBhIHtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4IDBweDtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtDT0xPUlMuREFSS0JPUkRFUn07XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTNweDtcclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvZGFzaGJvYXJkXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2Rhc2hib2FyZFwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29sdW1uc30gLz4gRGFzaGJvYXJkXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvaW1wb3J0c1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXBvcnRzXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFGaWxlSW1wb3J0fSAvPiBJbXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbm90aWZpY2F0aW9uc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9ub3RpZmljYXRpb25zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFCZWxsfSAvPiBOb3RpZmljYXRpb25zXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcHJvZmlsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9wcm9maWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFVc2VyfSAvPiBQcm9maWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvYWxsb2NhdGVkLWNvdXJlY2VzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUFsbG9Db3VyY2VNZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUxpc3R9IC8+IEFsbG9jYXRlZCBDb3Vyc2VzXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBkcm9wTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2Ryb3BNZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQm9va30gLz4gQWxsb2NhdGVkIENvdXJjZXNcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQZW9wbGVBcnJvd3N9IC8+IEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFOZXdzcGFwZXJ9IC8+IE1hcmsgRW50cnlcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFFZGl0fSAvPiBBc3NpZ25tZW50IENyZWF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFJZEJhZGdlfSAvPiBDb3VyY2UgQ29vcmRpbmF0b3IgQWxsb2NhdGlvblxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NsYXNzLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NsYXNzLXNjaGVkdWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDYWxlbmRhcn0gLz4gQ2xhc3MgU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9tZW50b3JpbmdcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlbWVudG9yTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFLZXlib2FyZH0gLz4gTWVudG9yaW5nXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBtZW50ZXJNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7bWVudGVyTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUdyYWR1YXRpb25DYXB9IC8+IEFzc2lnbmVkIFN0dWRlbnRzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29tcHJlc3NBcnJvd3NBbHR9IC8+IERpc2NyZXBhbmN5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2V4YW0tc2NoZWR1bGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvZXhhbS1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IEV4YW0gU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9yZXBvcnRzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3JlcG9ydHNcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoYXJ0QmFyfSAvPiBSZXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\"\n} : {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = false ? {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref6 = false ? {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\"\n} : {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nconst SideNavLinks = () => {\n  const router = useRouter();\n  const {\n    0: dropMenu,\n    1: setDropMenu\n  } = useState(false);\n  const {\n    0: menterMenu,\n    1: setMenterMenu\n  } = useState(false);\n\n  const toggleAlloCourceMenu = () => {\n    setDropMenu(!dropMenu);\n  };\n\n  const togglementorMenu = () => {\n    setMenterMenu(!menterMenu);\n  };\n\n  return ___EmotionJSX(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(\"ul\", {\n    css: /*#__PURE__*/css(\"height:calc(100% - 190px);overflow-y:auto;overflow-x:hidden;padding:10px 40px 10px 40px;color:\", COLORS.TEXTGRAY, \";& > li > a{padding:8px 0px;display:block;border-bottom:1px solid \", COLORS.DARKBORDER, \";font-size:13px;&:hover{color:\", COLORS.WHITE, \";}};label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/dashboard\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }), \" Dashboard\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/imports\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/imports\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faFileImport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }), \" Imports\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/notifications\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/notifications\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faBell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }), \" Notifications\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/profile\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }), \" Profile\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/allocated-coureces\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxlQ2FtcHVzXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0ptQiIsImZpbGUiOiJEOlxcQU5KSV9QUk9KRUNUU19GUk9OVEVORFxcZUNhbXB1c1xcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZVwiO1xyXG5pbXBvcnQge1xyXG4gIGZhQ29sdW1ucyxcclxuICBmYUZpbGVJbXBvcnQsXHJcbiAgZmFOb3Rlc01lZGljYWwsXHJcbiAgZmFCb29rLFxyXG4gIGZhQmVsbCxcclxuICBmYVVzZXIsXHJcbiAgZmFMaXN0LFxyXG4gIGZhSWRCYWRnZSxcclxuICBmYUNhbGVuZGFyLFxyXG4gIGZhS2V5Ym9hcmQsXHJcbiAgZmFDaGFydEJhcixcclxuICBmYVBob25lLFxyXG4gIGZhVGludCxcclxuICBmYUNoZXZyb25DaXJjbGVSaWdodCxcclxuICBmYUFycm93UmlnaHQsXHJcbiAgZmFDaGV2cm9uUmlnaHQsXHJcbiAgZmFQZW9wbGVBcnJvd3MsXHJcbiAgZmFIYW5kUGFwZXIsXHJcbiAgZmFQYXBlcmNsaXAsXHJcbiAgZmFOZXdzcGFwZXIsXHJcbiAgZmFDZXJ0aWZpY2F0ZSxcclxuICBmYUVkaXQsXHJcbiAgZmFHcmFkdWF0aW9uQ2FwLFxyXG4gIGZhQ29tcHJlc3NBcnJvd3NBbHQsXHJcbn0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5cclxuY29uc3QgU2lkZU5hdkxpbmtzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IFtkcm9wTWVudSwgc2V0RHJvcE1lbnVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFttZW50ZXJNZW51LCBzZXRNZW50ZXJNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlQWxsb0NvdXJjZU1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXREcm9wTWVudSghZHJvcE1lbnUpO1xyXG4gIH07XHJcbiAgY29uc3QgdG9nZ2xlbWVudG9yTWVudSA9ICgpID0+IHtcclxuICAgIHNldE1lbnRlck1lbnUoIW1lbnRlck1lbnUpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgIDx1bFxyXG4gICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxOTBweCk7XHJcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgICAgICAgcGFkZGluZzogMTBweCA0MHB4IDEwcHggNDBweDtcclxuICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAmID4gbGkgPiBhIHtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4IDBweDtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtDT0xPUlMuREFSS0JPUkRFUn07XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTNweDtcclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvZGFzaGJvYXJkXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2Rhc2hib2FyZFwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29sdW1uc30gLz4gRGFzaGJvYXJkXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvaW1wb3J0c1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXBvcnRzXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFGaWxlSW1wb3J0fSAvPiBJbXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbm90aWZpY2F0aW9uc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9ub3RpZmljYXRpb25zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFCZWxsfSAvPiBOb3RpZmljYXRpb25zXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcHJvZmlsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9wcm9maWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFVc2VyfSAvPiBQcm9maWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvYWxsb2NhdGVkLWNvdXJlY2VzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUFsbG9Db3VyY2VNZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUxpc3R9IC8+IEFsbG9jYXRlZCBDb3Vyc2VzXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBkcm9wTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2Ryb3BNZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQm9va30gLz4gQWxsb2NhdGVkIENvdXJjZXNcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQZW9wbGVBcnJvd3N9IC8+IEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFOZXdzcGFwZXJ9IC8+IE1hcmsgRW50cnlcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFFZGl0fSAvPiBBc3NpZ25tZW50IENyZWF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFJZEJhZGdlfSAvPiBDb3VyY2UgQ29vcmRpbmF0b3IgQWxsb2NhdGlvblxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NsYXNzLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NsYXNzLXNjaGVkdWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDYWxlbmRhcn0gLz4gQ2xhc3MgU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9tZW50b3JpbmdcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlbWVudG9yTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFLZXlib2FyZH0gLz4gTWVudG9yaW5nXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBtZW50ZXJNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7bWVudGVyTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUdyYWR1YXRpb25DYXB9IC8+IEFzc2lnbmVkIFN0dWRlbnRzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29tcHJlc3NBcnJvd3NBbHR9IC8+IERpc2NyZXBhbmN5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2V4YW0tc2NoZWR1bGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvZXhhbS1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IEV4YW0gU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9yZXBvcnRzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3JlcG9ydHNcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoYXJ0QmFyfSAvPiBSZXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"a\", {\n    className: \"clearfix cursor-pointer\",\n    onClick: toggleAlloCourceMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }), \" Allocated Courses\", ___EmotionJSX(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChevronRight,\n    css: dropMenu ? _ref : _ref2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }))), dropMenu && ___EmotionJSX(\"ul\", {\n    className: \"ml-6 font-sans text-sm\",\n    css: _ref3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faBook,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }), \" Allocated Cources\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faPeopleArrows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }), \" Attendance\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faNewspaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }), \" Mark Entry\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }), \" Assignment Creation\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/cource-coordinator-allocation\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/cource-coordinator-allocation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faIdBadge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }), \" Cource Coordinator Allocation\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/class-schedule\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/class-schedule\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCalendar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }), \" Class Schedule\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/mentoring\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"a\", {\n    className: \"clearfix cursor-pointer\",\n    onClick: togglementorMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faKeyboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }), \" Mentoring\", ___EmotionJSX(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChevronRight,\n    css: menterMenu ? _ref4 : _ref5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }))), menterMenu && ___EmotionJSX(\"ul\", {\n    className: \"ml-6 font-sans text-sm\",\n    css: _ref6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faGraduationCap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }), \" Assigned Students\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCompressArrowsAlt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 17\n    }\n  }), \" Discrepancy\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/exam-schedule\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxlQ2FtcHVzXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeVJtQiIsImZpbGUiOiJEOlxcQU5KSV9QUk9KRUNUU19GUk9OVEVORFxcZUNhbXB1c1xcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZVwiO1xyXG5pbXBvcnQge1xyXG4gIGZhQ29sdW1ucyxcclxuICBmYUZpbGVJbXBvcnQsXHJcbiAgZmFOb3Rlc01lZGljYWwsXHJcbiAgZmFCb29rLFxyXG4gIGZhQmVsbCxcclxuICBmYVVzZXIsXHJcbiAgZmFMaXN0LFxyXG4gIGZhSWRCYWRnZSxcclxuICBmYUNhbGVuZGFyLFxyXG4gIGZhS2V5Ym9hcmQsXHJcbiAgZmFDaGFydEJhcixcclxuICBmYVBob25lLFxyXG4gIGZhVGludCxcclxuICBmYUNoZXZyb25DaXJjbGVSaWdodCxcclxuICBmYUFycm93UmlnaHQsXHJcbiAgZmFDaGV2cm9uUmlnaHQsXHJcbiAgZmFQZW9wbGVBcnJvd3MsXHJcbiAgZmFIYW5kUGFwZXIsXHJcbiAgZmFQYXBlcmNsaXAsXHJcbiAgZmFOZXdzcGFwZXIsXHJcbiAgZmFDZXJ0aWZpY2F0ZSxcclxuICBmYUVkaXQsXHJcbiAgZmFHcmFkdWF0aW9uQ2FwLFxyXG4gIGZhQ29tcHJlc3NBcnJvd3NBbHQsXHJcbn0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5cclxuY29uc3QgU2lkZU5hdkxpbmtzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IFtkcm9wTWVudSwgc2V0RHJvcE1lbnVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFttZW50ZXJNZW51LCBzZXRNZW50ZXJNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlQWxsb0NvdXJjZU1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXREcm9wTWVudSghZHJvcE1lbnUpO1xyXG4gIH07XHJcbiAgY29uc3QgdG9nZ2xlbWVudG9yTWVudSA9ICgpID0+IHtcclxuICAgIHNldE1lbnRlck1lbnUoIW1lbnRlck1lbnUpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgIDx1bFxyXG4gICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxOTBweCk7XHJcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgICAgICAgcGFkZGluZzogMTBweCA0MHB4IDEwcHggNDBweDtcclxuICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAmID4gbGkgPiBhIHtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4IDBweDtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtDT0xPUlMuREFSS0JPUkRFUn07XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTNweDtcclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvZGFzaGJvYXJkXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2Rhc2hib2FyZFwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29sdW1uc30gLz4gRGFzaGJvYXJkXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvaW1wb3J0c1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXBvcnRzXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFGaWxlSW1wb3J0fSAvPiBJbXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbm90aWZpY2F0aW9uc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9ub3RpZmljYXRpb25zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFCZWxsfSAvPiBOb3RpZmljYXRpb25zXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcHJvZmlsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9wcm9maWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFVc2VyfSAvPiBQcm9maWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvYWxsb2NhdGVkLWNvdXJlY2VzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUFsbG9Db3VyY2VNZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUxpc3R9IC8+IEFsbG9jYXRlZCBDb3Vyc2VzXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBkcm9wTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2Ryb3BNZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQm9va30gLz4gQWxsb2NhdGVkIENvdXJjZXNcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQZW9wbGVBcnJvd3N9IC8+IEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFOZXdzcGFwZXJ9IC8+IE1hcmsgRW50cnlcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFFZGl0fSAvPiBBc3NpZ25tZW50IENyZWF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFJZEJhZGdlfSAvPiBDb3VyY2UgQ29vcmRpbmF0b3IgQWxsb2NhdGlvblxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NsYXNzLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NsYXNzLXNjaGVkdWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDYWxlbmRhcn0gLz4gQ2xhc3MgU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9tZW50b3JpbmdcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlbWVudG9yTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFLZXlib2FyZH0gLz4gTWVudG9yaW5nXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBtZW50ZXJNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7bWVudGVyTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUdyYWR1YXRpb25DYXB9IC8+IEFzc2lnbmVkIFN0dWRlbnRzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29tcHJlc3NBcnJvd3NBbHR9IC8+IERpc2NyZXBhbmN5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2V4YW0tc2NoZWR1bGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvZXhhbS1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IEV4YW0gU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9yZXBvcnRzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3JlcG9ydHNcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoYXJ0QmFyfSAvPiBSZXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/exam-schedule\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCalendar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }), \" Exam Schedule\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/reports\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxlQ2FtcHVzXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMlNtQiIsImZpbGUiOiJEOlxcQU5KSV9QUk9KRUNUU19GUk9OVEVORFxcZUNhbXB1c1xcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJAZW1vdGlvbi9jb3JlXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZVwiO1xyXG5pbXBvcnQge1xyXG4gIGZhQ29sdW1ucyxcclxuICBmYUZpbGVJbXBvcnQsXHJcbiAgZmFOb3Rlc01lZGljYWwsXHJcbiAgZmFCb29rLFxyXG4gIGZhQmVsbCxcclxuICBmYVVzZXIsXHJcbiAgZmFMaXN0LFxyXG4gIGZhSWRCYWRnZSxcclxuICBmYUNhbGVuZGFyLFxyXG4gIGZhS2V5Ym9hcmQsXHJcbiAgZmFDaGFydEJhcixcclxuICBmYVBob25lLFxyXG4gIGZhVGludCxcclxuICBmYUNoZXZyb25DaXJjbGVSaWdodCxcclxuICBmYUFycm93UmlnaHQsXHJcbiAgZmFDaGV2cm9uUmlnaHQsXHJcbiAgZmFQZW9wbGVBcnJvd3MsXHJcbiAgZmFIYW5kUGFwZXIsXHJcbiAgZmFQYXBlcmNsaXAsXHJcbiAgZmFOZXdzcGFwZXIsXHJcbiAgZmFDZXJ0aWZpY2F0ZSxcclxuICBmYUVkaXQsXHJcbiAgZmFHcmFkdWF0aW9uQ2FwLFxyXG4gIGZhQ29tcHJlc3NBcnJvd3NBbHQsXHJcbn0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xyXG5cclxuY29uc3QgU2lkZU5hdkxpbmtzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IFtkcm9wTWVudSwgc2V0RHJvcE1lbnVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFttZW50ZXJNZW51LCBzZXRNZW50ZXJNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlQWxsb0NvdXJjZU1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXREcm9wTWVudSghZHJvcE1lbnUpO1xyXG4gIH07XHJcbiAgY29uc3QgdG9nZ2xlbWVudG9yTWVudSA9ICgpID0+IHtcclxuICAgIHNldE1lbnRlck1lbnUoIW1lbnRlck1lbnUpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgIDx1bFxyXG4gICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxOTBweCk7XHJcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgICAgICAgcGFkZGluZzogMTBweCA0MHB4IDEwcHggNDBweDtcclxuICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAmID4gbGkgPiBhIHtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4IDBweDtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtDT0xPUlMuREFSS0JPUkRFUn07XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTNweDtcclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvZGFzaGJvYXJkXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2Rhc2hib2FyZFwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29sdW1uc30gLz4gRGFzaGJvYXJkXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvaW1wb3J0c1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXBvcnRzXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFGaWxlSW1wb3J0fSAvPiBJbXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbm90aWZpY2F0aW9uc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9ub3RpZmljYXRpb25zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFCZWxsfSAvPiBOb3RpZmljYXRpb25zXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcHJvZmlsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9wcm9maWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFVc2VyfSAvPiBQcm9maWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvYWxsb2NhdGVkLWNvdXJlY2VzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUFsbG9Db3VyY2VNZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUxpc3R9IC8+IEFsbG9jYXRlZCBDb3Vyc2VzXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBkcm9wTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2Ryb3BNZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQm9va30gLz4gQWxsb2NhdGVkIENvdXJjZXNcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQZW9wbGVBcnJvd3N9IC8+IEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFOZXdzcGFwZXJ9IC8+IE1hcmsgRW50cnlcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFFZGl0fSAvPiBBc3NpZ25tZW50IENyZWF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NvdXJjZS1jb29yZGluYXRvci1hbGxvY2F0aW9uXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFJZEJhZGdlfSAvPiBDb3VyY2UgQ29vcmRpbmF0b3IgQWxsb2NhdGlvblxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2NsYXNzLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL2NsYXNzLXNjaGVkdWxlXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDYWxlbmRhcn0gLz4gQ2xhc3MgU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9tZW50b3JpbmdcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlbWVudG9yTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFLZXlib2FyZH0gLz4gTWVudG9yaW5nXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBtZW50ZXJNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7bWVudGVyTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUdyYWR1YXRpb25DYXB9IC8+IEFzc2lnbmVkIFN0dWRlbnRzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29tcHJlc3NBcnJvd3NBbHR9IC8+IERpc2NyZXBhbmN5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2V4YW0tc2NoZWR1bGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuV0hJVEV9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvZXhhbS1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IEV4YW0gU2NoZWR1bGVcclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9yZXBvcnRzXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3JlcG9ydHNcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoYXJ0QmFyfSAvPiBSZXBvcnRzXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5XSElURX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLldISVRFfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/reports\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChartBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 15\n    }\n  }), \" Reports\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/query-form\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/query-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faPhone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }), \" Query Form\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/skins\" ? /*#__PURE__*/css(\"color:\", COLORS.WHITE, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/skins\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faTint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 15\n    }\n  }), \" Skins\")))));\n};\n\nexport default SideNavLinks;","map":{"version":3,"sources":["D:/ANJI_PROJECTS_FRONTEND/eCampus/components/sidenav/sideNavLinks.js"],"names":["React","useState","css","Link","useRouter","COLORS","FontAwesomeIcon","faColumns","faFileImport","faNotesMedical","faBook","faBell","faUser","faList","faIdBadge","faCalendar","faKeyboard","faChartBar","faPhone","faTint","faChevronCircleRight","faArrowRight","faChevronRight","faPeopleArrows","faHandPaper","faPaperclip","faNewspaper","faCertificate","faEdit","faGraduationCap","faCompressArrowsAlt","SideNavLinks","router","dropMenu","setDropMenu","menterMenu","setMenterMenu","toggleAlloCourceMenu","togglementorMenu","TEXTGRAY","DARKBORDER","WHITE","pathname"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/router\";\r\nimport { COLORS } from \"../../constants\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faColumns,\r\n  faFileImport,\r\n  faNotesMedical,\r\n  faBook,\r\n  faBell,\r\n  faUser,\r\n  faList,\r\n  faIdBadge,\r\n  faCalendar,\r\n  faKeyboard,\r\n  faChartBar,\r\n  faPhone,\r\n  faTint,\r\n  faChevronCircleRight,\r\n  faArrowRight,\r\n  faChevronRight,\r\n  faPeopleArrows,\r\n  faHandPaper,\r\n  faPaperclip,\r\n  faNewspaper,\r\n  faCertificate,\r\n  faEdit,\r\n  faGraduationCap,\r\n  faCompressArrowsAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SideNavLinks = () => {\r\n  const router = useRouter();\r\n  const [dropMenu, setDropMenu] = useState(false);\r\n  const [menterMenu, setMenterMenu] = useState(false);\r\n\r\n  const toggleAlloCourceMenu = () => {\r\n    setDropMenu(!dropMenu);\r\n  };\r\n  const togglementorMenu = () => {\r\n    setMenterMenu(!menterMenu);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ul\r\n        css={css`\r\n          height: calc(100% - 190px);\r\n          overflow-y: auto;\r\n          overflow-x: hidden;\r\n          padding: 10px 40px 10px 40px;\r\n          color: ${COLORS.TEXTGRAY};\r\n          & > li > a {\r\n            padding: 8px 0px;\r\n            display: block;\r\n\r\n            border-bottom: 1px solid ${COLORS.DARKBORDER};\r\n            font-size: 13px;\r\n            &:hover {\r\n              color: ${COLORS.WHITE};\r\n            }\r\n          }\r\n        `}\r\n      >\r\n        <li\r\n          css={\r\n            router.pathname === \"/dashboard\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/dashboard\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faColumns} /> Dashboard\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/imports\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/imports\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faFileImport} /> Imports\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/notifications\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/notifications\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faBell} /> Notifications\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/profile\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/profile\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faUser} /> Profile\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/allocated-coureces\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <a className=\"clearfix cursor-pointer\" onClick={toggleAlloCourceMenu}>\r\n            <FontAwesomeIcon icon={faList} /> Allocated Courses\r\n            <span className=\"float-right\">\r\n              <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                css={\r\n                  dropMenu\r\n                    ? css`\r\n                        transform: rotate(90deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                    : css`\r\n                        transform: rotate(0deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                }\r\n              />\r\n            </span>\r\n          </a>\r\n          {dropMenu && (\r\n            <ul\r\n              className=\"ml-6 font-sans text-sm\"\r\n              css={css`\r\n                & > li {\r\n                  padding: 4px 0px;\r\n                }\r\n              `}\r\n            >\r\n              <li>\r\n                <FontAwesomeIcon icon={faBook} /> Allocated Cources\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faPeopleArrows} /> Attendance\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faNewspaper} /> Mark Entry\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faEdit} /> Assignment Creation\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/cource-coordinator-allocation\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/cource-coordinator-allocation\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faIdBadge} /> Cource Coordinator Allocation\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/class-schedule\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/class-schedule\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faCalendar} /> Class Schedule\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/mentoring\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <a className=\"clearfix cursor-pointer\" onClick={togglementorMenu}>\r\n            <FontAwesomeIcon icon={faKeyboard} /> Mentoring\r\n            <span className=\"float-right\">\r\n              <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                css={\r\n                  menterMenu\r\n                    ? css`\r\n                        transform: rotate(90deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                    : css`\r\n                        transform: rotate(0deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                }\r\n              />\r\n            </span>\r\n          </a>\r\n          {menterMenu && (\r\n            <ul\r\n              className=\"ml-6 font-sans text-sm\"\r\n              css={css`\r\n                & > li {\r\n                  padding: 4px 0px;\r\n                }\r\n              `}\r\n            >\r\n              <li>\r\n                <FontAwesomeIcon icon={faGraduationCap} /> Assigned Students\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faCompressArrowsAlt} /> Discrepancy\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/exam-schedule\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/exam-schedule\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faCalendar} /> Exam Schedule\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/reports\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/reports\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faChartBar} /> Reports\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/query-form\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/query-form\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faPhone} /> Query Form\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/skins\"\r\n              ? css`\r\n                  color: ${COLORS.WHITE};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/skins\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faTint} /> Skins\r\n            </a>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SideNavLinks;\r\n"]},"metadata":{},"sourceType":"module"}
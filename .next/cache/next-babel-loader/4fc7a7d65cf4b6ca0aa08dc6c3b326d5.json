{"ast":null,"code":"import _css from \"@emotion/css\";\nvar _jsxFileName = \"D:\\\\ANJI_PROJECTS_FRONTEND\\\\eCampus\\\\components\\\\profile\\\\profile-modals\\\\phdModal.js\";\nvar __jsx = React.createElement;\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport moment from \"moment\";\nimport Cookies from \"js-cookie\";\nimport * as STYLES from \"../../../components/General/modalStyles\";\nimport DatePicker from \"react-datepicker\";\nimport { useSnackbar } from \"react-simple-snackbar\";\nimport FormInput from \"../../General/formInput\";\nimport { updatePhdDetails } from \"../../../services/profileService\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar _ref = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref6 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref7 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref8 = false ? {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\"\n} : {\n  name: \"y8clo9-profile-modals-PhdModal\",\n  styles: \"border:1px solid red;;label:profile-modals-PhdModal;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nconst PhdModal = ({\n  closeModal,\n  isPHDdata,\n  loadPhInfo\n}) => {\n  var _isPHDdata$department;\n\n  console.log(\"isPHDdatassss\", isPHDdata);\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(new Date());\n  const ProfileId = Cookies.get(\"employeeID\");\n  const [openSnackbar, closeSnackbar] = useSnackbar(); //YUP validation schema\n\n  const phdUpdateSchema = Yup.object().shape({\n    researchTitle: Yup.string().required(\"Required\"),\n    university: Yup.string().required(\"Required\"),\n    registeredYear: Yup.string().required(\"Required\"),\n    phdstatus: Yup.string().required(\"Required\"),\n    dateAward: Yup.string().required(\"Required\"),\n    supervisorName: Yup.string().required(\"Required\"),\n    supervisionAff: Yup.string().required(\"Required\"),\n    deptId: Yup.string(),\n    phdDetailsId: Yup.string()\n  });\n  const statusInfo = [\"Select Status\", \"Completed\", \"Pursuing\"];\n  return ___EmotionJSX(STYLES.PopupMask, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(STYLES.PopupWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(STYLES.PopupTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Ph.D Details\"), ___EmotionJSX(Formik, {\n    initialValues: {\n      researchTitle: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.researchTitle,\n      university: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.university,\n      registeredYear: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.registeredYear,\n      phdstatus: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.status,\n      dateAward: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.dateAward,\n      supervisorName: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.supervisiorName,\n      supervisionAff: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.supervisiorAffiliation,\n      deptId: isPHDdata === null || isPHDdata === void 0 ? void 0 : (_isPHDdata$department = isPHDdata.department) === null || _isPHDdata$department === void 0 ? void 0 : _isPHDdata$department.departmentPrimaryId,\n      phdDetailsId: isPHDdata === null || isPHDdata === void 0 ? void 0 : isPHDdata.phdDetailsID\n    },\n    validationSchema: phdUpdateSchema,\n    onSubmit: values => {\n      updatePhdDetails(ProfileId, values).then(data => {\n        if (data) {\n          openSnackbar(\"Ph.D Details updated successfully.\");\n          loadPhInfo();\n          closeModal();\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => ___EmotionJSX(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"clearfix mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left pr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(FormInput, {\n    label: \"Title of the Research\",\n    type: \"text\",\n    name: \"researchTitle\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.researchTitle,\n    placeholder: \"Title of the Research\",\n    css: errors.researchTitle && touched.researchTitle && errors.researchTitle && _ref8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(\"label\", {\n    htmlFor: \"researchTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"researchTitle\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.researchTitle,\n    placeholder: \"Title of the Research\",\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n    css: errors.researchTitle && touched.researchTitle && errors.researchTitle && _ref7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }))), ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"university\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"university\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.university,\n    placeholder: \"University\",\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n    css: errors.university && touched.university && errors.university && _ref6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  })))), ___EmotionJSX(\"div\", {\n    className: \"clearfix mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left pr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"registeredYear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"registeredYear\",\n    placeholder: \"registeredYear\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.registeredYear,\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n    css: errors.registeredYear && touched.registeredYear && errors.registeredYear && _ref5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }))), ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"phdstatus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"select\", {\n    name: \"phdstatus\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none\",\n    css: errors.phdstatus && touched.phdstatus && errors.phdstatus && _ref4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, statusInfo && statusInfo.map(opt => ___EmotionJSX(\"option\", {\n    key: opt,\n    value: values.phdstatus === opt ? values.phdstatus : opt,\n    selected: values.phdstatus === opt ? values.phdstatus : opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 27\n    }\n  }, opt))))), ___EmotionJSX(\"div\", {\n    className: \"w-full mt-3 float-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"dateAward\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"date\",\n    name: \"dateAward\",\n    id: \"DateAward\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.dateAward,\n    placeholder: \"dateAward\",\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n    css: errors.dateAward && touched.dateAward && errors.dateAward && _ref3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  })))), ___EmotionJSX(\"div\", {\n    className: \"clearfix mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left pr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"supervisorName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"supervisorName\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.supervisorName,\n    placeholder: \"supervisorName\",\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n    css: errors.supervisorName && touched.supervisorName && errors.supervisorName && _ref2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  }))), ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"supervisionAff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"supervisionAff\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.supervisionAff,\n    placeholder: \"Supervisior's Affiliation\",\n    className: \"border border-2 border-solid p-2 rounded w-full focus:outline-none \",\n    css: errors.supervisionAff && touched.supervisionAff && errors.supervisionAff && _ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }\n  })))), ___EmotionJSX(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(\"button\", {\n    type: \"submit\",\n    className: \"bg-green-400 px-3 py-2 rounded text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }\n  }, \"Save Ph.D Details\"), ___EmotionJSX(\"button\", {\n    type: \"button\",\n    onClick: closeModal,\n    className: \"bg-black px-3 py-2 ml-2 rounded text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }, \"Close\"))))));\n};\n\nexport default PhdModal;","map":{"version":3,"sources":["D:/ANJI_PROJECTS_FRONTEND/eCampus/components/profile/profile-modals/phdModal.js"],"names":["React","useState","useEffect","Formik","Yup","moment","Cookies","STYLES","DatePicker","useSnackbar","FormInput","updatePhdDetails","PhdModal","closeModal","isPHDdata","loadPhInfo","console","log","startDate","setStartDate","Date","ProfileId","get","openSnackbar","closeSnackbar","phdUpdateSchema","object","shape","researchTitle","string","required","university","registeredYear","phdstatus","dateAward","supervisorName","supervisionAff","deptId","phdDetailsId","statusInfo","status","supervisiorName","supervisiorAffiliation","department","departmentPrimaryId","phdDetailsID","values","then","data","errors","touched","handleChange","handleBlur","handleSubmit","map","opt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport css from \"@emotion/css\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport Cookies from \"js-cookie\";\r\nimport * as STYLES from \"../../../components/General/modalStyles\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useSnackbar } from \"react-simple-snackbar\";\r\nimport FormInput from \"../../General/formInput\";\r\nimport { updatePhdDetails } from \"../../../services/profileService\";\r\n\r\nconst PhdModal = ({ closeModal, isPHDdata, loadPhInfo }) => {\r\n  console.log(\"isPHDdatassss\", isPHDdata);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const ProfileId = Cookies.get(\"employeeID\");\r\n  const [openSnackbar, closeSnackbar] = useSnackbar();\r\n  //YUP validation schema\r\n  const phdUpdateSchema = Yup.object().shape({\r\n    researchTitle: Yup.string().required(\"Required\"),\r\n    university: Yup.string().required(\"Required\"),\r\n    registeredYear: Yup.string().required(\"Required\"),\r\n    phdstatus: Yup.string().required(\"Required\"),\r\n    dateAward: Yup.string().required(\"Required\"),\r\n    supervisorName: Yup.string().required(\"Required\"),\r\n    supervisionAff: Yup.string().required(\"Required\"),\r\n    deptId: Yup.string(),\r\n    phdDetailsId: Yup.string(),\r\n  });\r\n\r\n  const statusInfo = [\"Select Status\", \"Completed\", \"Pursuing\"];\r\n\r\n  return (\r\n    <STYLES.PopupMask>\r\n      <STYLES.PopupWrapper>\r\n        <STYLES.PopupTitle>Ph.D Details</STYLES.PopupTitle>\r\n        <Formik\r\n          initialValues={{\r\n            researchTitle: isPHDdata?.researchTitle,\r\n            university: isPHDdata?.university,\r\n            registeredYear: isPHDdata?.registeredYear,\r\n            phdstatus: isPHDdata?.status,\r\n            dateAward: isPHDdata?.dateAward,\r\n            supervisorName: isPHDdata?.supervisiorName,\r\n            supervisionAff: isPHDdata?.supervisiorAffiliation,\r\n            deptId: isPHDdata?.department?.departmentPrimaryId,\r\n            phdDetailsId: isPHDdata?.phdDetailsID,\r\n          }}\r\n          validationSchema={phdUpdateSchema}\r\n          onSubmit={(values) => {\r\n            updatePhdDetails(ProfileId, values).then((data) => {\r\n              if (data) {\r\n                openSnackbar(\"Ph.D Details updated successfully.\");\r\n                loadPhInfo();\r\n                closeModal();\r\n              }\r\n            });\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"clearfix mb-3\">\r\n                <div className=\"w-6/12 float-left pr-2\">\r\n                  <FormInput\r\n                    label=\"Title of the Research\"\r\n                    type=\"text\"\r\n                    name=\"researchTitle\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.researchTitle}\r\n                    placeholder=\"Title of the Research\"\r\n                    css={\r\n                      errors.researchTitle &&\r\n                      touched.researchTitle &&\r\n                      errors.researchTitle &&\r\n                      css`\r\n                        border: 1px solid red;\r\n                      `\r\n                    }\r\n                  />\r\n                  <label htmlFor=\"researchTitle\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"researchTitle\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.researchTitle}\r\n                      placeholder=\"Title of the Research\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.researchTitle &&\r\n                        touched.researchTitle &&\r\n                        errors.researchTitle &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"w-6/12 float-left \">\r\n                  <label htmlFor=\"university\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"university\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.university}\r\n                      placeholder=\"University\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.university &&\r\n                        touched.university &&\r\n                        errors.university &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"clearfix mb-3\">\r\n                <div className=\"w-6/12 float-left pr-2\">\r\n                  <label htmlFor=\"registeredYear\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"registeredYear\"\r\n                      placeholder=\"registeredYear\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.registeredYear}\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.registeredYear &&\r\n                        touched.registeredYear &&\r\n                        errors.registeredYear &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"w-6/12 float-left\">\r\n                  <label htmlFor=\"phdstatus\">\r\n                    <select\r\n                      name=\"phdstatus\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none\"\r\n                      css={\r\n                        errors.phdstatus &&\r\n                        touched.phdstatus &&\r\n                        errors.phdstatus &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    >\r\n                      {statusInfo &&\r\n                        statusInfo.map((opt) => (\r\n                          <option\r\n                            key={opt}\r\n                            value={\r\n                              values.phdstatus === opt ? values.phdstatus : opt\r\n                            }\r\n                            selected={\r\n                              values.phdstatus === opt ? values.phdstatus : opt\r\n                            }\r\n                          >\r\n                            {opt}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                  </label>\r\n                </div>\r\n                <div className=\"w-full mt-3 float-left\">\r\n                  <label htmlFor=\"dateAward\">\r\n                    <input\r\n                      type=\"date\"\r\n                      name=\"dateAward\"\r\n                      id=\"DateAward\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.dateAward}\r\n                      placeholder=\"dateAward\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.dateAward &&\r\n                        touched.dateAward &&\r\n                        errors.dateAward &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"clearfix mb-3\">\r\n                <div className=\"w-6/12 float-left pr-2\">\r\n                  <label htmlFor=\"supervisorName\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"supervisorName\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.supervisorName}\r\n                      placeholder=\"supervisorName\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.supervisorName &&\r\n                        touched.supervisorName &&\r\n                        errors.supervisorName &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n\r\n                <div className=\"w-6/12 float-left \">\r\n                  <label htmlFor=\"supervisionAff\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"supervisionAff\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.supervisionAff}\r\n                      placeholder=\"Supervisior's Affiliation\"\r\n                      className=\"border border-2 border-solid p-2 rounded w-full focus:outline-none \"\r\n                      css={\r\n                        errors.supervisionAff &&\r\n                        touched.supervisionAff &&\r\n                        errors.supervisionAff &&\r\n                        css`\r\n                          border: 1px solid red;\r\n                        `\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"float-right\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-green-400 px-3 py-2 rounded text-white\"\r\n                >\r\n                  Save Ph.D Details\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={closeModal}\r\n                  className=\"bg-black px-3 py-2 ml-2 rounded text-white\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </STYLES.PopupWrapper>\r\n    </STYLES.PopupMask>\r\n  );\r\n};\r\nexport default PhdModal;\r\n"]},"metadata":{},"sourceType":"module"}
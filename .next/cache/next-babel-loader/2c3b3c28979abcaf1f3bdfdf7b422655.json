{"ast":null,"code":"import _css from \"@emotion/css\";\nvar _jsxFileName = \"D:\\\\ANJI_PROJECTS_FRONTEND\\\\eCampus\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Cookies from \"js-cookie\";\nimport { COLORS } from \"../constants\";\nimport { LoginService } from \"../services/loginService\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport ChangePassword from \"../components/modals/changePassword\";\nimport ForgotPassword from \"../components/modals/forgotPassword\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar _ref = false ? {\n  name: \"1on4olv-pages-Home\",\n  styles: \"margin-top:10px;& > button{font-weight:600;font-size:14px;padding-top:4px;color:white;text-align:right;display:block;};label:pages-Home;\"\n} : {\n  name: \"1on4olv-pages-Home\",\n  styles: \"margin-top:10px;& > button{font-weight:600;font-size:14px;padding-top:4px;color:white;text-align:right;display:block;};label:pages-Home;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? {\n  name: \"dkwyh4-pages-Home\",\n  styles: \"position:absolute;width:360px;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-moz-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);;label:pages-Home;\"\n} : {\n  name: \"dkwyh4-pages-Home\",\n  styles: \"position:absolute;width:360px;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-moz-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);;label:pages-Home;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? {\n  name: \"pa6oq7-pages-Home\",\n  styles: \"position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-moz-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);;label:pages-Home;\"\n} : {\n  name: \"pa6oq7-pages-Home\",\n  styles: \"position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-moz-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);;label:pages-Home;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? {\n  name: \"1jlq423-pages-Home\",\n  styles: \"background:#9053c7;background:-webkit-linear-gradient(-135deg,#c850c0,#4158d0);background:-o-linear-gradient(-135deg,#c850c0,#4158d0);background:-moz-linear-gradient(-135deg,#c850c0,#4158d0);background:linear-gradient(-135deg,#c850c0,#4158d0);;label:pages-Home;\"\n} : {\n  name: \"1jlq423-pages-Home\",\n  styles: \"background:#9053c7;background:-webkit-linear-gradient(-135deg,#c850c0,#4158d0);background:-o-linear-gradient(-135deg,#c850c0,#4158d0);background:-moz-linear-gradient(-135deg,#c850c0,#4158d0);background:linear-gradient(-135deg,#c850c0,#4158d0);;label:pages-Home;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nconst Home = () => {\n  const logoImage = \"http://54.87.169.150:8081/faculty/images/png.png\";\n  const router = useRouter();\n  const {\n    0: isLoginData,\n    1: setIsLoginData\n  } = useState();\n  const {\n    0: isLoader,\n    1: setIsLoader\n  } = useState(false);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  const {\n    0: isChangePass,\n    1: setIsChangePass\n  } = useState(false);\n  const {\n    0: isForgotPass,\n    1: setIsForgotPass\n  } = useState(false); //YUP validation schema\n\n  const loginSchema = Yup.object().shape({\n    username: Yup.string().required(\"Required\"),\n    password: Yup.string().required(\"Required\"),\n    operation: Yup.string()\n  });\n  console.log(process.env.PORT); //store login data and to redirect dashboard\n\n  const storeLoginData = data => {\n    setIsLoginData(data);\n\n    if (data) {\n      Cookies.set(\"loggedUserStatus\", data === null || data === void 0 ? void 0 : data.departmentId);\n      Cookies.set(\"userName\", data === null || data === void 0 ? void 0 : data.employeeName);\n      Cookies.set(\"employeeID\", data === null || data === void 0 ? void 0 : data.employeeID);\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.status) === \"loggedin\") {\n      router.push(\"/dashboard\");\n      setIsLoader(false);\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.status) === \"User ID or Password is incorrect\") {\n      setIsError(true);\n      setIsLoader(false);\n    }\n\n    console.log(data);\n  }; //open changepass modal\n\n\n  const openChangePassModal = () => {\n    setIsChangePass(!isChangePass);\n  }; //open forgot modal\n\n\n  const openForgotPassModal = () => {\n    setIsForgotPass(!isForgotPass);\n  };\n\n  return ___EmotionJSX(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(\"section\", {\n    className: \"h-screen block clearfix\",\n    css: _ref4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-left h-screen bg-white relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"block m-auto\",\n    css: _ref3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"img\", {\n    src: logoImage,\n    alt: \"Annamachary Educational trust\",\n    title: \"Annamachary Educational trust\",\n    className: \"lazyload block m-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(\"h1\", {\n    className: \"font-sans text-md font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Annamachary Educational Trust\"))), ___EmotionJSX(\"div\", {\n    className: \"w-6/12 float-right h-screen relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"div\", {\n    css: _ref2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"h3\", {\n    className: \"text-3xl font-bold font-sans text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Faculty Login\"), ___EmotionJSX(Formik, {\n    initialValues: {\n      username: \"\",\n      password: \"\",\n      operation: \"login\"\n    },\n    validationSchema: loginSchema,\n    onSubmit: values => {\n      setIsLoader(true);\n      LoginService(values).then(data => {\n        storeLoginData(data);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => ___EmotionJSX(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"label\", {\n    htmlFor: \"username relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: \"Username\",\n    value: values.username,\n    className: \"block w-full text-black py-2 px-4 box-border mt-4 rounded shadow focus: outline-none\",\n    css: errors.username && touched.username && errors.username && /*#__PURE__*/_css(\"border:1px solid \", COLORS.RED, \";;label:pages-Home;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(\"div\", {\n    css: /*#__PURE__*/_css(\"position:absolute;right:10px;top:70px;font-size:14px;color:\", COLORS.RED_DARKER, \";;label:pages-Home;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, errors.username && touched.username && errors.username)), ___EmotionJSX(\"label\", {\n    htmlFor: \"password relative block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.password,\n    className: \"block w-full text-black py-2 px-4 box-border mt-4 rounded shadow focus: outline-none\",\n    css: errors.password && touched.password && errors.password && /*#__PURE__*/_css(\"border:1px solid \", COLORS.RED, \";;label:pages-Home;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(\"div\", {\n    css: /*#__PURE__*/_css(\"position:absolute;right:10px;top:130px;font-size:14px;color:\", COLORS.RED_DARKER, \";;label:pages-Home;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxlQ2FtcHVzXFxwYWdlc1xcaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0w4QiIsImZpbGUiOiJEOlxcQU5KSV9QUk9KRUNUU19GUk9OVEVORFxcZUNhbXB1c1xccGFnZXNcXGluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBjc3MgZnJvbSBcIkBlbW90aW9uL2Nzc1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgRm9ybWlrIH0gZnJvbSBcImZvcm1pa1wiO1xyXG5pbXBvcnQgKiBhcyBZdXAgZnJvbSBcInl1cFwiO1xyXG5pbXBvcnQgQ29va2llcyBmcm9tIFwianMtY29va2llXCI7XHJcbmltcG9ydCB7IENPTE9SUyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2xvZ2luU2VydmljZVwiO1xyXG5pbXBvcnQgUHVsc2VMb2FkZXIgZnJvbSBcInJlYWN0LXNwaW5uZXJzL1B1bHNlTG9hZGVyXCI7XHJcbmltcG9ydCBDaGFuZ2VQYXNzd29yZCBmcm9tIFwiLi4vY29tcG9uZW50cy9tb2RhbHMvY2hhbmdlUGFzc3dvcmRcIjtcclxuaW1wb3J0IEZvcmdvdFBhc3N3b3JkIGZyb20gXCIuLi9jb21wb25lbnRzL21vZGFscy9mb3Jnb3RQYXNzd29yZFwiO1xyXG5cclxuY29uc3QgSG9tZSA9ICgpID0+IHtcclxuICBjb25zdCBsb2dvSW1hZ2UgPSBcImh0dHA6Ly81NC44Ny4xNjkuMTUwOjgwODEvZmFjdWx0eS9pbWFnZXMvcG5nLnBuZ1wiO1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IFtpc0xvZ2luRGF0YSwgc2V0SXNMb2dpbkRhdGFdID0gdXNlU3RhdGUoKTtcclxuICBjb25zdCBbaXNMb2FkZXIsIHNldElzTG9hZGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNFcnJvciwgc2V0SXNFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2lzQ2hhbmdlUGFzcywgc2V0SXNDaGFuZ2VQYXNzXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNGb3Jnb3RQYXNzLCBzZXRJc0ZvcmdvdFBhc3NdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICAvL1lVUCB2YWxpZGF0aW9uIHNjaGVtYVxyXG4gIGNvbnN0IGxvZ2luU2NoZW1hID0gWXVwLm9iamVjdCgpLnNoYXBlKHtcclxuICAgIHVzZXJuYW1lOiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIHBhc3N3b3JkOiBZdXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIG9wZXJhdGlvbjogWXVwLnN0cmluZygpLFxyXG4gIH0pO1xyXG5cclxuICBjb25zb2xlLmxvZyhwcm9jZXNzLmVudi5QT1JUKTtcclxuICAvL3N0b3JlIGxvZ2luIGRhdGEgYW5kIHRvIHJlZGlyZWN0IGRhc2hib2FyZFxyXG4gIGNvbnN0IHN0b3JlTG9naW5EYXRhID0gKGRhdGEpID0+IHtcclxuICAgIHNldElzTG9naW5EYXRhKGRhdGEpO1xyXG4gICAgaWYgKGRhdGEpIHtcclxuICAgICAgQ29va2llcy5zZXQoXCJsb2dnZWRVc2VyU3RhdHVzXCIsIGRhdGE/LmRlcGFydG1lbnRJZCk7XHJcbiAgICAgIENvb2tpZXMuc2V0KFwidXNlck5hbWVcIiwgZGF0YT8uZW1wbG95ZWVOYW1lKTtcclxuICAgICAgQ29va2llcy5zZXQoXCJlbXBsb3llZUlEXCIsIGRhdGE/LmVtcGxveWVlSUQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRhdGE/LnN0YXR1cyA9PT0gXCJsb2dnZWRpblwiKSB7XHJcbiAgICAgIHJvdXRlci5wdXNoKFwiL2Rhc2hib2FyZFwiKTtcclxuICAgICAgc2V0SXNMb2FkZXIoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRhdGE/LnN0YXR1cyA9PT0gXCJVc2VyIElEIG9yIFBhc3N3b3JkIGlzIGluY29ycmVjdFwiKSB7XHJcbiAgICAgIHNldElzRXJyb3IodHJ1ZSk7XHJcbiAgICAgIHNldElzTG9hZGVyKGZhbHNlKTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIC8vb3BlbiBjaGFuZ2VwYXNzIG1vZGFsXHJcbiAgY29uc3Qgb3BlbkNoYW5nZVBhc3NNb2RhbCA9ICgpID0+IHtcclxuICAgIHNldElzQ2hhbmdlUGFzcyghaXNDaGFuZ2VQYXNzKTtcclxuICB9O1xyXG5cclxuICAvL29wZW4gZm9yZ290IG1vZGFsXHJcbiAgY29uc3Qgb3BlbkZvcmdvdFBhc3NNb2RhbCA9ICgpID0+IHtcclxuICAgIHNldElzRm9yZ290UGFzcyghaXNGb3Jnb3RQYXNzKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8c2VjdGlvblxyXG4gICAgICAgIGNsYXNzTmFtZT1cImgtc2NyZWVuIGJsb2NrIGNsZWFyZml4XCJcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIGJhY2tncm91bmQ6ICM5MDUzYzc7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCgtMTM1ZGVnLCAjYzg1MGMwLCAjNDE1OGQwKTtcclxuICAgICAgICAgIGJhY2tncm91bmQ6IC1vLWxpbmVhci1ncmFkaWVudCgtMTM1ZGVnLCAjYzg1MGMwLCAjNDE1OGQwKTtcclxuICAgICAgICAgIGJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KC0xMzVkZWcsICNjODUwYzAsICM0MTU4ZDApO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC0xMzVkZWcsICNjODUwYzAsICM0MTU4ZDApO1xyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNi8xMiBmbG9hdC1sZWZ0IGgtc2NyZWVuIGJnLXdoaXRlIHJlbGF0aXZlXCI+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJsb2NrIG0tYXV0b1wiXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICB0b3A6IDUwJTtcclxuICAgICAgICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgICAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgICAgICAgICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgIHNyYz17bG9nb0ltYWdlfVxyXG4gICAgICAgICAgICAgIGFsdD1cIkFubmFtYWNoYXJ5IEVkdWNhdGlvbmFsIHRydXN0XCJcclxuICAgICAgICAgICAgICB0aXRsZT1cIkFubmFtYWNoYXJ5IEVkdWNhdGlvbmFsIHRydXN0XCJcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsYXp5bG9hZCBibG9jayBtLWF1dG9cIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiZm9udC1zYW5zIHRleHQtbWQgZm9udC1ib2xkXCI+XHJcbiAgICAgICAgICAgICAgQW5uYW1hY2hhcnkgRWR1Y2F0aW9uYWwgVHJ1c3RcclxuICAgICAgICAgICAgPC9oMT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy02LzEyIGZsb2F0LXJpZ2h0IGgtc2NyZWVuIHJlbGF0aXZlXCI+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICB3aWR0aDogMzYwcHg7XHJcbiAgICAgICAgICAgICAgdG9wOiA1MCU7XHJcbiAgICAgICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICAgICAgICAgICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgICAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBmb250LWJvbGQgZm9udC1zYW5zIHRleHQtd2hpdGVcIj5cclxuICAgICAgICAgICAgICBGYWN1bHR5IExvZ2luXHJcbiAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgIHsvKkxvZ2luIEZvcm0gU3RhdHJ0cyAqL31cclxuICAgICAgICAgICAgPEZvcm1pa1xyXG4gICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e3tcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwibG9naW5cIixcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25TY2hlbWE9e2xvZ2luU2NoZW1hfVxyXG4gICAgICAgICAgICAgIG9uU3VibWl0PXsodmFsdWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRlcih0cnVlKTtcclxuICAgICAgICAgICAgICAgIExvZ2luU2VydmljZSh2YWx1ZXMpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgc3RvcmVMb2dpbkRhdGEoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgeyh7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMsXHJcbiAgICAgICAgICAgICAgICBlcnJvcnMsXHJcbiAgICAgICAgICAgICAgICB0b3VjaGVkLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlQmx1cixcclxuICAgICAgICAgICAgICAgIGhhbmRsZVN1Ym1pdCxcclxuICAgICAgICAgICAgICB9KSA9PiAoXHJcbiAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ1c2VybmFtZSByZWxhdGl2ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlVzZXJuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXMudXNlcm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJibG9jayB3LWZ1bGwgdGV4dC1ibGFjayBweS0yIHB4LTQgYm94LWJvcmRlciBtdC00IHJvdW5kZWQgc2hhZG93IGZvY3VzOiBvdXRsaW5lLW5vbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnVzZXJuYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQudXNlcm5hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnVzZXJuYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0NPTE9SUy5SRUR9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiA3MHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy51c2VybmFtZSAmJiB0b3VjaGVkLnVzZXJuYW1lICYmIGVycm9ycy51c2VybmFtZX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc3dvcmQgcmVsYXRpdmUgYmxvY2tcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlcy5wYXNzd29yZH1cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJsb2NrIHctZnVsbCB0ZXh0LWJsYWNrIHB5LTIgcHgtNCBib3gtYm9yZGVyIG10LTQgcm91bmRlZCBzaGFkb3cgZm9jdXM6IG91dGxpbmUtbm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucGFzc3dvcmQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hlZC5wYXNzd29yZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucGFzc3dvcmQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Q09MT1JTLlJFRH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDEzMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5SRURfREFSS0VSfTtcclxuICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Vycm9ycy5wYXNzd29yZCAmJiB0b3VjaGVkLnBhc3N3b3JkICYmIGVycm9ycy5wYXNzd29yZH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlubGluZS1ibG9jayB3LTUvMTIgZm9udC1tZWRpdW0gIGJnLWdyZWVuLTYwMCBmb2N1czpvdXRsaW5lLW5vbmUgcHktMyBweC00IHVwcGVyY2FzZSByb3VuZGVkIHNoYWRvdy0yeGwgdGV4dC13aGl0ZSBtdC00IGhvdmVyOmJnLWdyYXktNzAwXCJcclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtpc0xvYWRlciA/IDxQdWxzZUxvYWRlciBzaXplPVwiN1wiIGNvbG9yPVwiI2ZmZlwiIC8+IDogXCJMb2dpblwifVxyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlubGluZS1ibG9jayBmbG9hdC1yaWdodFwiXHJcbiAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgJiA+IGJ1dHRvbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9jdXM6b3V0bGluZS1ub25lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29wZW5DaGFuZ2VQYXNzTW9kYWx9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlIFBhc3N3b3JkID9cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJmb2N1czpvdXRsaW5lLW5vbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIEZvcmdvdCBQYXNzd29yZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIDwvRm9ybWlrPlxyXG4gICAgICAgICAgICB7aXNFcnJvciAmJiAoXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSBwLTIgdGV4dC1sZWZ0IHRleHQtcmVkLTgwMCBtdC00IHJvdW5kZWQgc2hhZG93LTJ4bFwiPlxyXG4gICAgICAgICAgICAgICAgVXNlciBJRCBvciBQYXNzd29yZCBpcyBpbmNvcnJlY3RcclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L3NlY3Rpb24+XHJcbiAgICAgIHtpc0NoYW5nZVBhc3MgJiYgKFxyXG4gICAgICAgIDxDaGFuZ2VQYXNzd29yZCBvcGVuQ2hhbmdlUGFzc01vZGFsPXtvcGVuQ2hhbmdlUGFzc01vZGFsfSAvPlxyXG4gICAgICApfVxyXG4gICAgICB7aXNGb3Jnb3RQYXNzICYmIChcclxuICAgICAgICA8Rm9yZ290UGFzc3dvcmQgb3BlbkZvcmdvdFBhc3NNb2RhbD17b3BlbkZvcmdvdFBhc3NNb2RhbH0gLz5cclxuICAgICAgKX1cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvbWU7XHJcbiJdfQ== */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }, errors.password && touched.password && errors.password)), ___EmotionJSX(\"button\", {\n    type: \"submit\",\n    className: \"inline-block w-5/12 font-medium  bg-green-600 focus:outline-none py-3 px-4 uppercase rounded shadow-2xl text-white mt-4 hover:bg-gray-700\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 19\n    }\n  }, isLoader ? ___EmotionJSX(PulseLoader, {\n    size: \"7\",\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }) : \"Login\"), ___EmotionJSX(\"div\", {\n    className: \"inline-block float-right\",\n    css: _ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }, ___EmotionJSX(\"button\", {\n    type: \"button\",\n    className: \"focus:outline-none\",\n    onClick: openChangePassModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  }, \"Change Password ?\"), ___EmotionJSX(\"button\", {\n    type: \"button\",\n    className: \"focus:outline-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }\n  }, \"Forgot Password ?\")))), isError && ___EmotionJSX(\"div\", {\n    className: \"bg-white p-2 text-left text-red-800 mt-4 rounded shadow-2xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 15\n    }\n  }, \"User ID or Password is incorrect\")))), isChangePass && ___EmotionJSX(ChangePassword, {\n    openChangePassModal: openChangePassModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }), isForgotPass && ___EmotionJSX(ForgotPassword, {\n    openForgotPassModal: openForgotPassModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Home;","map":{"version":3,"sources":["D:/ANJI_PROJECTS_FRONTEND/eCampus/pages/index.js"],"names":["React","useState","useRouter","Formik","Yup","Cookies","COLORS","LoginService","PulseLoader","ChangePassword","ForgotPassword","Home","logoImage","router","isLoginData","setIsLoginData","isLoader","setIsLoader","isError","setIsError","isChangePass","setIsChangePass","isForgotPass","setIsForgotPass","loginSchema","object","shape","username","string","required","password","operation","console","log","process","env","PORT","storeLoginData","data","set","departmentId","employeeName","employeeID","status","push","openChangePassModal","openForgotPassModal","values","then","errors","touched","handleChange","handleBlur","handleSubmit","RED","RED_DARKER"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,cAAP,MAA2B,qCAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,SAAS,GAAG,kDAAlB;AACA,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,EAA9C;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACiB,OAAD;AAAA,OAAUC;AAAV,MAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACmB,YAAD;AAAA,OAAeC;AAAf,MAAkCpB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACqB,YAAD;AAAA,OAAeC;AAAf,MAAkCtB,QAAQ,CAAC,KAAD,CAAhD,CAPiB,CASjB;;AACA,QAAMuB,WAAW,GAAGpB,GAAG,CAACqB,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,IAAAA,QAAQ,EAAEvB,GAAG,CAACwB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAD2B;AAErCC,IAAAA,QAAQ,EAAE1B,GAAG,CAACwB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAF2B;AAGrCE,IAAAA,SAAS,EAAE3B,GAAG,CAACwB,MAAJ;AAH0B,GAAnB,CAApB;AAMAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,IAAxB,EAhBiB,CAiBjB;;AACA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/BvB,IAAAA,cAAc,CAACuB,IAAD,CAAd;;AACA,QAAIA,IAAJ,EAAU;AACRjC,MAAAA,OAAO,CAACkC,GAAR,CAAY,kBAAZ,EAAgCD,IAAhC,aAAgCA,IAAhC,uBAAgCA,IAAI,CAAEE,YAAtC;AACAnC,MAAAA,OAAO,CAACkC,GAAR,CAAY,UAAZ,EAAwBD,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEG,YAA9B;AACApC,MAAAA,OAAO,CAACkC,GAAR,CAAY,YAAZ,EAA0BD,IAA1B,aAA0BA,IAA1B,uBAA0BA,IAAI,CAAEI,UAAhC;AACD;;AACD,QAAI,CAAAJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEK,MAAN,MAAiB,UAArB,EAAiC;AAC/B9B,MAAAA,MAAM,CAAC+B,IAAP,CAAY,YAAZ;AACA3B,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AACD,QAAI,CAAAqB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEK,MAAN,MAAiB,kCAArB,EAAyD;AACvDxB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AACDe,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACD,GAhBD,CAlBiB,CAoCjB;;;AACA,QAAMO,mBAAmB,GAAG,MAAM;AAChCxB,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD,CArCiB,CAyCjB;;;AACA,QAAM0B,mBAAmB,GAAG,MAAM;AAChCvB,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,SACE,cAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,yBADZ;AAEE,IAAA,GAAG,OAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE;AAAK,IAAA,SAAS,EAAC,8CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,GAAG,OAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYE;AACE,IAAA,GAAG,EAAEV,SADP;AAEE,IAAA,GAAG,EAAC,+BAFN;AAGE,IAAA,KAAK,EAAC,+BAHR;AAIE,IAAA,SAAS,EAAC,uBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAkBE;AAAI,IAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAlBF,CADF,CAVF,EAkCE;AAAK,IAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,OADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYE;AAAI,IAAA,SAAS,EAAC,yCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAZF,EAgBE,cAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbe,MAAAA,QAAQ,EAAE,EADG;AAEbG,MAAAA,QAAQ,EAAE,EAFG;AAGbC,MAAAA,SAAS,EAAE;AAHE,KADjB;AAME,IAAA,gBAAgB,EAAEP,WANpB;AAOE,IAAA,QAAQ,EAAGuB,MAAD,IAAY;AACpB9B,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAV,MAAAA,YAAY,CAACwC,MAAD,CAAZ,CAAqBC,IAArB,CAA2BV,IAAD,IAAU;AAClCD,QAAAA,cAAc,CAACC,IAAD,CAAd;AACD,OAFD;AAGD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcG,CAAC;AACAS,IAAAA,MADA;AAEAE,IAAAA,MAFA;AAGAC,IAAAA,OAHA;AAIAC,IAAAA,YAJA;AAKAC,IAAAA,UALA;AAMAC,IAAAA;AANA,GAAD,KAQC;AAAM,IAAA,QAAQ,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAEF,YAHZ;AAIE,IAAA,MAAM,EAAEC,UAJV;AAKE,IAAA,WAAW,EAAC,UALd;AAME,IAAA,KAAK,EAAEL,MAAM,CAACpB,QANhB;AAOE,IAAA,SAAS,EAAC,sFAPZ;AAQE,IAAA,GAAG,EACDsB,MAAM,CAACtB,QAAP,IACAuB,OAAO,CAACvB,QADR,IAEAsB,MAAM,CAACtB,QAFP,2CAIsBrB,MAAM,CAACgD,GAJ7B,+0ZATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAkBE;AACE,IAAA,GAAG,mFAKQhD,MAAM,CAACiD,UALf,+0ZADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGN,MAAM,CAACtB,QAAP,IAAmBuB,OAAO,CAACvB,QAA3B,IAAuCsB,MAAM,CAACtB,QATjD,CAlBF,CADF,EAgCE;AAAO,IAAA,OAAO,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,QAAQ,EAAEwB,YAJZ;AAKE,IAAA,MAAM,EAAEC,UALV;AAME,IAAA,KAAK,EAAEL,MAAM,CAACjB,QANhB;AAOE,IAAA,SAAS,EAAC,sFAPZ;AAQE,IAAA,GAAG,EACDmB,MAAM,CAACnB,QAAP,IACAoB,OAAO,CAACpB,QADR,IAEAmB,MAAM,CAACnB,QAFP,2CAIsBxB,MAAM,CAACgD,GAJ7B,+0ZATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAkBE;AACE,IAAA,GAAG,oFAKQhD,MAAM,CAACiD,UALf,+0ZADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGN,MAAM,CAACnB,QAAP,IAAmBoB,OAAO,CAACpB,QAA3B,IAAuCmB,MAAM,CAACnB,QATjD,CAlBF,CAhCF,EA8DE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,2IAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGd,QAAQ,GAAG,cAAC,WAAD;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,KAAK,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA2C,OAJtD,CA9DF,EAoEE;AACE,IAAA,SAAS,EAAC,0BADZ;AAEE,IAAA,GAAG,MAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,oBAFZ;AAGE,IAAA,OAAO,EAAE6B,mBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAdF,EAqBE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,oBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArBF,CApEF,CAtBJ,CAhBF,EAsIG3B,OAAO,IACN;AAAK,IAAA,SAAS,EAAC,6DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAvIJ,CADF,CAlCF,CADF,EAkLGE,YAAY,IACX,cAAC,cAAD;AAAgB,IAAA,mBAAmB,EAAEyB,mBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnLJ,EAqLGvB,YAAY,IACX,cAAC,cAAD;AAAgB,IAAA,mBAAmB,EAAEwB,mBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtLJ,CADF;AA2LD,CAzOD;;AA2OA,eAAenC,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport css from \"@emotion/css\";\r\nimport { useRouter } from \"next/router\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Cookies from \"js-cookie\";\r\nimport { COLORS } from \"../constants\";\r\nimport { LoginService } from \"../services/loginService\";\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport ChangePassword from \"../components/modals/changePassword\";\r\nimport ForgotPassword from \"../components/modals/forgotPassword\";\r\n\r\nconst Home = () => {\r\n  const logoImage = \"http://54.87.169.150:8081/faculty/images/png.png\";\r\n  const router = useRouter();\r\n  const [isLoginData, setIsLoginData] = useState();\r\n  const [isLoader, setIsLoader] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [isChangePass, setIsChangePass] = useState(false);\r\n  const [isForgotPass, setIsForgotPass] = useState(false);\r\n\r\n  //YUP validation schema\r\n  const loginSchema = Yup.object().shape({\r\n    username: Yup.string().required(\"Required\"),\r\n    password: Yup.string().required(\"Required\"),\r\n    operation: Yup.string(),\r\n  });\r\n\r\n  console.log(process.env.PORT);\r\n  //store login data and to redirect dashboard\r\n  const storeLoginData = (data) => {\r\n    setIsLoginData(data);\r\n    if (data) {\r\n      Cookies.set(\"loggedUserStatus\", data?.departmentId);\r\n      Cookies.set(\"userName\", data?.employeeName);\r\n      Cookies.set(\"employeeID\", data?.employeeID);\r\n    }\r\n    if (data?.status === \"loggedin\") {\r\n      router.push(\"/dashboard\");\r\n      setIsLoader(false);\r\n    }\r\n    if (data?.status === \"User ID or Password is incorrect\") {\r\n      setIsError(true);\r\n      setIsLoader(false);\r\n    }\r\n    console.log(data);\r\n  };\r\n\r\n  //open changepass modal\r\n  const openChangePassModal = () => {\r\n    setIsChangePass(!isChangePass);\r\n  };\r\n\r\n  //open forgot modal\r\n  const openForgotPassModal = () => {\r\n    setIsForgotPass(!isForgotPass);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section\r\n        className=\"h-screen block clearfix\"\r\n        css={css`\r\n          background: #9053c7;\r\n          background: -webkit-linear-gradient(-135deg, #c850c0, #4158d0);\r\n          background: -o-linear-gradient(-135deg, #c850c0, #4158d0);\r\n          background: -moz-linear-gradient(-135deg, #c850c0, #4158d0);\r\n          background: linear-gradient(-135deg, #c850c0, #4158d0);\r\n        `}\r\n      >\r\n        <div className=\"w-6/12 float-left h-screen bg-white relative\">\r\n          <div\r\n            className=\"block m-auto\"\r\n            css={css`\r\n              position: absolute;\r\n              top: 50%;\r\n              left: 50%;\r\n              -webkit-transform: translate(-50%, -50%);\r\n              -moz-transform: translate(-50%, -50%);\r\n              -ms-transform: translate(-50%, -50%);\r\n              transform: translate(-50%, -50%);\r\n            `}\r\n          >\r\n            <img\r\n              src={logoImage}\r\n              alt=\"Annamachary Educational trust\"\r\n              title=\"Annamachary Educational trust\"\r\n              className=\"lazyload block m-auto\"\r\n            />\r\n            <h1 className=\"font-sans text-md font-bold\">\r\n              Annamachary Educational Trust\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"w-6/12 float-right h-screen relative\">\r\n          <div\r\n            css={css`\r\n              position: absolute;\r\n              width: 360px;\r\n              top: 50%;\r\n              left: 50%;\r\n              -webkit-transform: translate(-50%, -50%);\r\n              -moz-transform: translate(-50%, -50%);\r\n              -ms-transform: translate(-50%, -50%);\r\n              transform: translate(-50%, -50%);\r\n            `}\r\n          >\r\n            <h3 className=\"text-3xl font-bold font-sans text-white\">\r\n              Faculty Login\r\n            </h3>\r\n            {/*Login Form Statrts */}\r\n            <Formik\r\n              initialValues={{\r\n                username: \"\",\r\n                password: \"\",\r\n                operation: \"login\",\r\n              }}\r\n              validationSchema={loginSchema}\r\n              onSubmit={(values) => {\r\n                setIsLoader(true);\r\n                LoginService(values).then((data) => {\r\n                  storeLoginData(data);\r\n                });\r\n              }}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                  <label htmlFor=\"username relative\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      placeholder=\"Username\"\r\n                      value={values.username}\r\n                      className=\"block w-full text-black py-2 px-4 box-border mt-4 rounded shadow focus: outline-none\"\r\n                      css={\r\n                        errors.username &&\r\n                        touched.username &&\r\n                        errors.username &&\r\n                        css`\r\n                          border: 1px solid ${COLORS.RED};\r\n                        `\r\n                      }\r\n                    />\r\n                    <div\r\n                      css={css`\r\n                        position: absolute;\r\n                        right: 10px;\r\n                        top: 70px;\r\n                        font-size: 14px;\r\n                        color: ${COLORS.RED_DARKER};\r\n                      `}\r\n                    >\r\n                      {errors.username && touched.username && errors.username}\r\n                    </div>\r\n                  </label>\r\n\r\n                  <label htmlFor=\"password relative block\">\r\n                    <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      placeholder=\"Password\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      className=\"block w-full text-black py-2 px-4 box-border mt-4 rounded shadow focus: outline-none\"\r\n                      css={\r\n                        errors.password &&\r\n                        touched.password &&\r\n                        errors.password &&\r\n                        css`\r\n                          border: 1px solid ${COLORS.RED};\r\n                        `\r\n                      }\r\n                    />\r\n                    <div\r\n                      css={css`\r\n                        position: absolute;\r\n                        right: 10px;\r\n                        top: 130px;\r\n                        font-size: 14px;\r\n                        color: ${COLORS.RED_DARKER};\r\n                      `}\r\n                    >\r\n                      {errors.password && touched.password && errors.password}\r\n                    </div>\r\n                  </label>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"inline-block w-5/12 font-medium  bg-green-600 focus:outline-none py-3 px-4 uppercase rounded shadow-2xl text-white mt-4 hover:bg-gray-700\"\r\n                  >\r\n                    {isLoader ? <PulseLoader size=\"7\" color=\"#fff\" /> : \"Login\"}\r\n                  </button>\r\n                  <div\r\n                    className=\"inline-block float-right\"\r\n                    css={css`\r\n                      margin-top: 10px;\r\n                      & > button {\r\n                        font-weight: 600;\r\n                        font-size: 14px;\r\n                        padding-top: 4px;\r\n                        color: white;\r\n                        text-align: right;\r\n                        display: block;\r\n                      }\r\n                    `}\r\n                  >\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"focus:outline-none\"\r\n                      onClick={openChangePassModal}\r\n                    >\r\n                      Change Password ?\r\n                    </button>\r\n                    <button type=\"button\" className=\"focus:outline-none\">\r\n                      Forgot Password ?\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              )}\r\n            </Formik>\r\n            {isError && (\r\n              <div className=\"bg-white p-2 text-left text-red-800 mt-4 rounded shadow-2xl\">\r\n                User ID or Password is incorrect\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n      {isChangePass && (\r\n        <ChangePassword openChangePassModal={openChangePassModal} />\r\n      )}\r\n      {isForgotPass && (\r\n        <ForgotPassword openForgotPassModal={openForgotPassModal} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}
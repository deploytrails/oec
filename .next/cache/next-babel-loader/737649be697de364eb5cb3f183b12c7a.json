{"ast":null,"code":"var _jsxFileName = \"D:\\\\ANJI_PROJECTS_FRONTEND\\\\OECFRONTEND\\\\components\\\\sidenav\\\\sideNavLinks.js\";\nvar __jsx = React.createElement;\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport { css } from \"@emotion/core\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { COLORS } from \"../../constants\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faColumns, faFileImport, faNotesMedical, faBook, faBell, faUser, faList, faIdBadge, faCalendar, faKeyboard, faChartBar, faPhone, faTint, faChevronCircleRight, faArrowRight, faChevronRight, faPeopleArrows, faHandPaper, faPaperclip, faNewspaper, faCertificate, faEdit, faGraduationCap, faCompressArrowsAlt, faExchangeAlt, faRegistered, faObjectGroup, faLayerGroup, faAddressCard } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar _ref = false ? {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZLeUIiLCJmaWxlIjoiRDpcXEFOSklfUFJPSkVDVFNfRlJPTlRFTkRcXE9FQ0ZST05URU5EXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XHJcbmltcG9ydCB7XHJcbiAgZmFDb2x1bW5zLFxyXG4gIGZhRmlsZUltcG9ydCxcclxuICBmYU5vdGVzTWVkaWNhbCxcclxuICBmYUJvb2ssXHJcbiAgZmFCZWxsLFxyXG4gIGZhVXNlcixcclxuICBmYUxpc3QsXHJcbiAgZmFJZEJhZGdlLFxyXG4gIGZhQ2FsZW5kYXIsXHJcbiAgZmFLZXlib2FyZCxcclxuICBmYUNoYXJ0QmFyLFxyXG4gIGZhUGhvbmUsXHJcbiAgZmFUaW50LFxyXG4gIGZhQ2hldnJvbkNpcmNsZVJpZ2h0LFxyXG4gIGZhQXJyb3dSaWdodCxcclxuICBmYUNoZXZyb25SaWdodCxcclxuICBmYVBlb3BsZUFycm93cyxcclxuICBmYUhhbmRQYXBlcixcclxuICBmYVBhcGVyY2xpcCxcclxuICBmYU5ld3NwYXBlcixcclxuICBmYUNlcnRpZmljYXRlLFxyXG4gIGZhRWRpdCxcclxuICBmYUdyYWR1YXRpb25DYXAsXHJcbiAgZmFDb21wcmVzc0Fycm93c0FsdCxcclxuICBmYUV4Y2hhbmdlQWx0LFxyXG4gIGZhUmVnaXN0ZXJlZCxcclxuICBmYU9iamVjdEdyb3VwLFxyXG4gIGZhTGF5ZXJHcm91cCxcclxuICBmYUFkZHJlc3NDYXJkLFxyXG59IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNpZGVOYXZMaW5rcyA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBbZHJvcE1lbnUsIHNldERyb3BNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbbWVudGVyTWVudSwgc2V0TWVudGVyTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2V4YW1NZW51LCBzZXRFeGFtTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3JlcG9ydHNNZW51LCBzZXRSZXBvcnRzTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZUFsbG9Db3VyY2VNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RHJvcE1lbnUoIWRyb3BNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZW1lbnRvck1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXRNZW50ZXJNZW51KCFtZW50ZXJNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZUV4YW1NZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RXhhbU1lbnUoIWV4YW1NZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZVJlcG9ydHNNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0UmVwb3J0c01lbnUoIXJlcG9ydHNNZW51KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8dWxcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMTkwcHgpO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgICAgICAgIHBhZGRpbmc6IDEwcHggNDBweCAxMHB4IDQwcHg7XHJcbiAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgJiA+IGxpID4gYSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwcHg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7Q09MT1JTLkRBUktCT1JERVJ9O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEzcHg7XHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2Rhc2hib2FyZFwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9kYXNoYm9hcmRcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbHVtbnN9IC8+IERhc2hib2FyZFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2ltcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaW1wb3J0c1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRmlsZUltcG9ydH0gLz4gSW1wb3J0c1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL25vdGlmaWNhdGlvbnNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbm90aWZpY2F0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQmVsbH0gLz4gTm90aWZpY2F0aW9uc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3Byb2ZpbGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcHJvZmlsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz4gUHJvZmlsZVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2FsbG9jYXRlZC1jb3VyZWNlc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2xlYXJmaXggY3Vyc29yLXBvaW50ZXJcIiBvbkNsaWNrPXt0b2dnbGVBbGxvQ291cmNlTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMaXN0fSAvPiBBbGxvY2F0ZWQgQ291cnNlc1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgZHJvcE1lbnVcclxuICAgICAgICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIHtkcm9wTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUJvb2t9IC8+IEFsbG9jYXRlZCBDb3VyY2VzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhUGVvcGxlQXJyb3dzfSAvPiBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhTmV3c3BhcGVyfSAvPiBNYXJrIEVudHJ5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRWRpdH0gLz4gQXNzaWdubWVudCBDcmVhdGlvblxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhSWRCYWRnZX0gLz4gQ291cmNlIENvb3JkaW5hdG9yIEFsbG9jYXRpb25cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jbGFzcy1zY2hlZHVsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jbGFzcy1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IENsYXNzIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbWVudG9yaW5nXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZW1lbnRvck1lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhS2V5Ym9hcmR9IC8+IE1lbnRvcmluZ1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgbWVudGVyTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge21lbnRlck1lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFHcmFkdWF0aW9uQ2FwfSAvPiBBc3NpZ25lZCBTdHVkZW50c1xyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbXByZXNzQXJyb3dzQWx0fSAvPiBEaXNjcmVwYW5jeVxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9leGFtLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUV4YW1NZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNhbGVuZGFyfSAvPiBFeGFtIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBleGFtTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2V4YW1NZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRXhjaGFuZ2VBbHR9IC8+IEV4YW0gSW52aWdpbGF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3JlcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlUmVwb3J0c01lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hhcnRCYXJ9IC8+IFJlcG9ydHNcclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uXHJcbiAgICAgICAgICAgICAgICBpY29uPXtmYUNoZXZyb25SaWdodH1cclxuICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgIHJlcG9ydHNNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7cmVwb3J0c01lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFSZWdpc3RlcmVkfSAvPiBDb3VyY2UgUmVnaXN0ZXJcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMYXllckdyb3VwfSAvPiBDb3VyY2UgV2lzZSBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQWRkcmVzc0NhcmR9IC8+IERheSBXaXNlIEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\"\n} : {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = false ? {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref6 = false ? {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\"\n} : {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref7 = false ? {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref8 = false ? {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlUeUIiLCJmaWxlIjoiRDpcXEFOSklfUFJPSkVDVFNfRlJPTlRFTkRcXE9FQ0ZST05URU5EXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XHJcbmltcG9ydCB7XHJcbiAgZmFDb2x1bW5zLFxyXG4gIGZhRmlsZUltcG9ydCxcclxuICBmYU5vdGVzTWVkaWNhbCxcclxuICBmYUJvb2ssXHJcbiAgZmFCZWxsLFxyXG4gIGZhVXNlcixcclxuICBmYUxpc3QsXHJcbiAgZmFJZEJhZGdlLFxyXG4gIGZhQ2FsZW5kYXIsXHJcbiAgZmFLZXlib2FyZCxcclxuICBmYUNoYXJ0QmFyLFxyXG4gIGZhUGhvbmUsXHJcbiAgZmFUaW50LFxyXG4gIGZhQ2hldnJvbkNpcmNsZVJpZ2h0LFxyXG4gIGZhQXJyb3dSaWdodCxcclxuICBmYUNoZXZyb25SaWdodCxcclxuICBmYVBlb3BsZUFycm93cyxcclxuICBmYUhhbmRQYXBlcixcclxuICBmYVBhcGVyY2xpcCxcclxuICBmYU5ld3NwYXBlcixcclxuICBmYUNlcnRpZmljYXRlLFxyXG4gIGZhRWRpdCxcclxuICBmYUdyYWR1YXRpb25DYXAsXHJcbiAgZmFDb21wcmVzc0Fycm93c0FsdCxcclxuICBmYUV4Y2hhbmdlQWx0LFxyXG4gIGZhUmVnaXN0ZXJlZCxcclxuICBmYU9iamVjdEdyb3VwLFxyXG4gIGZhTGF5ZXJHcm91cCxcclxuICBmYUFkZHJlc3NDYXJkLFxyXG59IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNpZGVOYXZMaW5rcyA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBbZHJvcE1lbnUsIHNldERyb3BNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbbWVudGVyTWVudSwgc2V0TWVudGVyTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2V4YW1NZW51LCBzZXRFeGFtTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3JlcG9ydHNNZW51LCBzZXRSZXBvcnRzTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZUFsbG9Db3VyY2VNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RHJvcE1lbnUoIWRyb3BNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZW1lbnRvck1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXRNZW50ZXJNZW51KCFtZW50ZXJNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZUV4YW1NZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RXhhbU1lbnUoIWV4YW1NZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZVJlcG9ydHNNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0UmVwb3J0c01lbnUoIXJlcG9ydHNNZW51KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8dWxcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMTkwcHgpO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgICAgICAgIHBhZGRpbmc6IDEwcHggNDBweCAxMHB4IDQwcHg7XHJcbiAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgJiA+IGxpID4gYSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwcHg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7Q09MT1JTLkRBUktCT1JERVJ9O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEzcHg7XHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2Rhc2hib2FyZFwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9kYXNoYm9hcmRcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbHVtbnN9IC8+IERhc2hib2FyZFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2ltcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaW1wb3J0c1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRmlsZUltcG9ydH0gLz4gSW1wb3J0c1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL25vdGlmaWNhdGlvbnNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbm90aWZpY2F0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQmVsbH0gLz4gTm90aWZpY2F0aW9uc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3Byb2ZpbGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcHJvZmlsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz4gUHJvZmlsZVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2FsbG9jYXRlZC1jb3VyZWNlc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2xlYXJmaXggY3Vyc29yLXBvaW50ZXJcIiBvbkNsaWNrPXt0b2dnbGVBbGxvQ291cmNlTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMaXN0fSAvPiBBbGxvY2F0ZWQgQ291cnNlc1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgZHJvcE1lbnVcclxuICAgICAgICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIHtkcm9wTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUJvb2t9IC8+IEFsbG9jYXRlZCBDb3VyY2VzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhUGVvcGxlQXJyb3dzfSAvPiBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhTmV3c3BhcGVyfSAvPiBNYXJrIEVudHJ5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRWRpdH0gLz4gQXNzaWdubWVudCBDcmVhdGlvblxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhSWRCYWRnZX0gLz4gQ291cmNlIENvb3JkaW5hdG9yIEFsbG9jYXRpb25cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jbGFzcy1zY2hlZHVsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jbGFzcy1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IENsYXNzIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbWVudG9yaW5nXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZW1lbnRvck1lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhS2V5Ym9hcmR9IC8+IE1lbnRvcmluZ1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgbWVudGVyTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge21lbnRlck1lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFHcmFkdWF0aW9uQ2FwfSAvPiBBc3NpZ25lZCBTdHVkZW50c1xyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbXByZXNzQXJyb3dzQWx0fSAvPiBEaXNjcmVwYW5jeVxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9leGFtLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUV4YW1NZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNhbGVuZGFyfSAvPiBFeGFtIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBleGFtTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2V4YW1NZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRXhjaGFuZ2VBbHR9IC8+IEV4YW0gSW52aWdpbGF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3JlcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlUmVwb3J0c01lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hhcnRCYXJ9IC8+IFJlcG9ydHNcclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uXHJcbiAgICAgICAgICAgICAgICBpY29uPXtmYUNoZXZyb25SaWdodH1cclxuICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgIHJlcG9ydHNNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7cmVwb3J0c01lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFSZWdpc3RlcmVkfSAvPiBDb3VyY2UgUmVnaXN0ZXJcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMYXllckdyb3VwfSAvPiBDb3VyY2UgV2lzZSBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQWRkcmVzc0NhcmR9IC8+IERheSBXaXNlIEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref9 = false ? {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\"\n} : {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Vc0IiLCJmaWxlIjoiRDpcXEFOSklfUFJPSkVDVFNfRlJPTlRFTkRcXE9FQ0ZST05URU5EXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XHJcbmltcG9ydCB7XHJcbiAgZmFDb2x1bW5zLFxyXG4gIGZhRmlsZUltcG9ydCxcclxuICBmYU5vdGVzTWVkaWNhbCxcclxuICBmYUJvb2ssXHJcbiAgZmFCZWxsLFxyXG4gIGZhVXNlcixcclxuICBmYUxpc3QsXHJcbiAgZmFJZEJhZGdlLFxyXG4gIGZhQ2FsZW5kYXIsXHJcbiAgZmFLZXlib2FyZCxcclxuICBmYUNoYXJ0QmFyLFxyXG4gIGZhUGhvbmUsXHJcbiAgZmFUaW50LFxyXG4gIGZhQ2hldnJvbkNpcmNsZVJpZ2h0LFxyXG4gIGZhQXJyb3dSaWdodCxcclxuICBmYUNoZXZyb25SaWdodCxcclxuICBmYVBlb3BsZUFycm93cyxcclxuICBmYUhhbmRQYXBlcixcclxuICBmYVBhcGVyY2xpcCxcclxuICBmYU5ld3NwYXBlcixcclxuICBmYUNlcnRpZmljYXRlLFxyXG4gIGZhRWRpdCxcclxuICBmYUdyYWR1YXRpb25DYXAsXHJcbiAgZmFDb21wcmVzc0Fycm93c0FsdCxcclxuICBmYUV4Y2hhbmdlQWx0LFxyXG4gIGZhUmVnaXN0ZXJlZCxcclxuICBmYU9iamVjdEdyb3VwLFxyXG4gIGZhTGF5ZXJHcm91cCxcclxuICBmYUFkZHJlc3NDYXJkLFxyXG59IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNpZGVOYXZMaW5rcyA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBbZHJvcE1lbnUsIHNldERyb3BNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbbWVudGVyTWVudSwgc2V0TWVudGVyTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2V4YW1NZW51LCBzZXRFeGFtTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3JlcG9ydHNNZW51LCBzZXRSZXBvcnRzTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZUFsbG9Db3VyY2VNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RHJvcE1lbnUoIWRyb3BNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZW1lbnRvck1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXRNZW50ZXJNZW51KCFtZW50ZXJNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZUV4YW1NZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RXhhbU1lbnUoIWV4YW1NZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZVJlcG9ydHNNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0UmVwb3J0c01lbnUoIXJlcG9ydHNNZW51KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8dWxcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMTkwcHgpO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgICAgICAgIHBhZGRpbmc6IDEwcHggNDBweCAxMHB4IDQwcHg7XHJcbiAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgJiA+IGxpID4gYSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwcHg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7Q09MT1JTLkRBUktCT1JERVJ9O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEzcHg7XHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2Rhc2hib2FyZFwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9kYXNoYm9hcmRcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbHVtbnN9IC8+IERhc2hib2FyZFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2ltcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaW1wb3J0c1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRmlsZUltcG9ydH0gLz4gSW1wb3J0c1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL25vdGlmaWNhdGlvbnNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbm90aWZpY2F0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQmVsbH0gLz4gTm90aWZpY2F0aW9uc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3Byb2ZpbGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcHJvZmlsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz4gUHJvZmlsZVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2FsbG9jYXRlZC1jb3VyZWNlc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2xlYXJmaXggY3Vyc29yLXBvaW50ZXJcIiBvbkNsaWNrPXt0b2dnbGVBbGxvQ291cmNlTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMaXN0fSAvPiBBbGxvY2F0ZWQgQ291cnNlc1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgZHJvcE1lbnVcclxuICAgICAgICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIHtkcm9wTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUJvb2t9IC8+IEFsbG9jYXRlZCBDb3VyY2VzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhUGVvcGxlQXJyb3dzfSAvPiBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhTmV3c3BhcGVyfSAvPiBNYXJrIEVudHJ5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRWRpdH0gLz4gQXNzaWdubWVudCBDcmVhdGlvblxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhSWRCYWRnZX0gLz4gQ291cmNlIENvb3JkaW5hdG9yIEFsbG9jYXRpb25cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jbGFzcy1zY2hlZHVsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jbGFzcy1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IENsYXNzIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbWVudG9yaW5nXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZW1lbnRvck1lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhS2V5Ym9hcmR9IC8+IE1lbnRvcmluZ1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgbWVudGVyTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge21lbnRlck1lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFHcmFkdWF0aW9uQ2FwfSAvPiBBc3NpZ25lZCBTdHVkZW50c1xyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbXByZXNzQXJyb3dzQWx0fSAvPiBEaXNjcmVwYW5jeVxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9leGFtLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUV4YW1NZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNhbGVuZGFyfSAvPiBFeGFtIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBleGFtTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2V4YW1NZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRXhjaGFuZ2VBbHR9IC8+IEV4YW0gSW52aWdpbGF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3JlcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlUmVwb3J0c01lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hhcnRCYXJ9IC8+IFJlcG9ydHNcclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uXHJcbiAgICAgICAgICAgICAgICBpY29uPXtmYUNoZXZyb25SaWdodH1cclxuICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgIHJlcG9ydHNNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7cmVwb3J0c01lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFSZWdpc3RlcmVkfSAvPiBDb3VyY2UgUmVnaXN0ZXJcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMYXllckdyb3VwfSAvPiBDb3VyY2UgV2lzZSBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQWRkcmVzc0NhcmR9IC8+IERheSBXaXNlIEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref10 = false ? {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1uo8lw3-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(90deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref11 = false ? {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\"\n} : {\n  name: \"1tkeqnk-sidenav-SideNavLinks\",\n  styles: \"transform:rotate(0deg);transition:all 0.1s ease-in-out;;label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref12 = false ? {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\"\n} : {\n  name: \"o5qmsh-sidenav-SideNavLinks\",\n  styles: \"& > li{padding:4px 0px;};label:sidenav-SideNavLinks;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nconst SideNavLinks = () => {\n  const router = useRouter();\n  const {\n    0: dropMenu,\n    1: setDropMenu\n  } = useState(false);\n  const {\n    0: menterMenu,\n    1: setMenterMenu\n  } = useState(false);\n  const {\n    0: examMenu,\n    1: setExamMenu\n  } = useState(false);\n  const {\n    0: reportsMenu,\n    1: setReportsMenu\n  } = useState(false);\n\n  const toggleAlloCourceMenu = () => {\n    setDropMenu(!dropMenu);\n  };\n\n  const togglementorMenu = () => {\n    setMenterMenu(!menterMenu);\n  };\n\n  const toggleExamMenu = () => {\n    setExamMenu(!examMenu);\n  };\n\n  const toggleReportsMenu = () => {\n    setReportsMenu(!reportsMenu);\n  };\n\n  return ___EmotionJSX(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(\"ul\", {\n    css: /*#__PURE__*/css(\"height:calc(100% - 190px);overflow-y:auto;overflow-x:hidden;padding:10px 40px 10px 40px;color:\", COLORS.TEXTGRAY, \";& > li > a{padding:8px 0px;display:block;border-bottom:1px solid \", COLORS.DARKBORDER, \";font-size:13px;&:hover{color:\", COLORS.GREEN, \";}};label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/dashboard\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }), \" Dashboard\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/imports\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/imports\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faFileImport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }), \" Imports\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/notifications\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/notifications\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faBell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }), \" Notifications\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/profile\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }), \" Profile\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/allocated-coureces\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"a\", {\n    className: \"clearfix cursor-pointer\",\n    onClick: toggleAlloCourceMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }), \" Allocated Courses\", ___EmotionJSX(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChevronRight,\n    css: dropMenu ? _ref : _ref2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }))), dropMenu && ___EmotionJSX(\"ul\", {\n    className: \"ml-6 font-sans text-sm\",\n    css: _ref3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faBook,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }), \" Allocated Cources\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faPeopleArrows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }), \" Attendance\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faNewspaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }), \" Mark Entry\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }), \" Assignment Creation\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/cource-coordinator-allocation\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlObUIiLCJmaWxlIjoiRDpcXEFOSklfUFJPSkVDVFNfRlJPTlRFTkRcXE9FQ0ZST05URU5EXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XHJcbmltcG9ydCB7XHJcbiAgZmFDb2x1bW5zLFxyXG4gIGZhRmlsZUltcG9ydCxcclxuICBmYU5vdGVzTWVkaWNhbCxcclxuICBmYUJvb2ssXHJcbiAgZmFCZWxsLFxyXG4gIGZhVXNlcixcclxuICBmYUxpc3QsXHJcbiAgZmFJZEJhZGdlLFxyXG4gIGZhQ2FsZW5kYXIsXHJcbiAgZmFLZXlib2FyZCxcclxuICBmYUNoYXJ0QmFyLFxyXG4gIGZhUGhvbmUsXHJcbiAgZmFUaW50LFxyXG4gIGZhQ2hldnJvbkNpcmNsZVJpZ2h0LFxyXG4gIGZhQXJyb3dSaWdodCxcclxuICBmYUNoZXZyb25SaWdodCxcclxuICBmYVBlb3BsZUFycm93cyxcclxuICBmYUhhbmRQYXBlcixcclxuICBmYVBhcGVyY2xpcCxcclxuICBmYU5ld3NwYXBlcixcclxuICBmYUNlcnRpZmljYXRlLFxyXG4gIGZhRWRpdCxcclxuICBmYUdyYWR1YXRpb25DYXAsXHJcbiAgZmFDb21wcmVzc0Fycm93c0FsdCxcclxuICBmYUV4Y2hhbmdlQWx0LFxyXG4gIGZhUmVnaXN0ZXJlZCxcclxuICBmYU9iamVjdEdyb3VwLFxyXG4gIGZhTGF5ZXJHcm91cCxcclxuICBmYUFkZHJlc3NDYXJkLFxyXG59IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNpZGVOYXZMaW5rcyA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBbZHJvcE1lbnUsIHNldERyb3BNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbbWVudGVyTWVudSwgc2V0TWVudGVyTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2V4YW1NZW51LCBzZXRFeGFtTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3JlcG9ydHNNZW51LCBzZXRSZXBvcnRzTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZUFsbG9Db3VyY2VNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RHJvcE1lbnUoIWRyb3BNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZW1lbnRvck1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXRNZW50ZXJNZW51KCFtZW50ZXJNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZUV4YW1NZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RXhhbU1lbnUoIWV4YW1NZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZVJlcG9ydHNNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0UmVwb3J0c01lbnUoIXJlcG9ydHNNZW51KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8dWxcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMTkwcHgpO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgICAgICAgIHBhZGRpbmc6IDEwcHggNDBweCAxMHB4IDQwcHg7XHJcbiAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgJiA+IGxpID4gYSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwcHg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7Q09MT1JTLkRBUktCT1JERVJ9O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEzcHg7XHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2Rhc2hib2FyZFwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9kYXNoYm9hcmRcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbHVtbnN9IC8+IERhc2hib2FyZFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2ltcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaW1wb3J0c1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRmlsZUltcG9ydH0gLz4gSW1wb3J0c1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL25vdGlmaWNhdGlvbnNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbm90aWZpY2F0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQmVsbH0gLz4gTm90aWZpY2F0aW9uc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3Byb2ZpbGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcHJvZmlsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz4gUHJvZmlsZVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2FsbG9jYXRlZC1jb3VyZWNlc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2xlYXJmaXggY3Vyc29yLXBvaW50ZXJcIiBvbkNsaWNrPXt0b2dnbGVBbGxvQ291cmNlTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMaXN0fSAvPiBBbGxvY2F0ZWQgQ291cnNlc1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgZHJvcE1lbnVcclxuICAgICAgICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIHtkcm9wTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUJvb2t9IC8+IEFsbG9jYXRlZCBDb3VyY2VzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhUGVvcGxlQXJyb3dzfSAvPiBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhTmV3c3BhcGVyfSAvPiBNYXJrIEVudHJ5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRWRpdH0gLz4gQXNzaWdubWVudCBDcmVhdGlvblxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhSWRCYWRnZX0gLz4gQ291cmNlIENvb3JkaW5hdG9yIEFsbG9jYXRpb25cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jbGFzcy1zY2hlZHVsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jbGFzcy1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IENsYXNzIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbWVudG9yaW5nXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZW1lbnRvck1lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhS2V5Ym9hcmR9IC8+IE1lbnRvcmluZ1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgbWVudGVyTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge21lbnRlck1lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFHcmFkdWF0aW9uQ2FwfSAvPiBBc3NpZ25lZCBTdHVkZW50c1xyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbXByZXNzQXJyb3dzQWx0fSAvPiBEaXNjcmVwYW5jeVxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9leGFtLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUV4YW1NZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNhbGVuZGFyfSAvPiBFeGFtIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBleGFtTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2V4YW1NZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRXhjaGFuZ2VBbHR9IC8+IEV4YW0gSW52aWdpbGF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3JlcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlUmVwb3J0c01lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hhcnRCYXJ9IC8+IFJlcG9ydHNcclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uXHJcbiAgICAgICAgICAgICAgICBpY29uPXtmYUNoZXZyb25SaWdodH1cclxuICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgIHJlcG9ydHNNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7cmVwb3J0c01lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFSZWdpc3RlcmVkfSAvPiBDb3VyY2UgUmVnaXN0ZXJcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMYXllckdyb3VwfSAvPiBDb3VyY2UgV2lzZSBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQWRkcmVzc0NhcmR9IC8+IERheSBXaXNlIEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/cource-coordinator-allocation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faIdBadge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }), \" Cource Coordinator Allocation\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/class-schedule\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/class-schedule\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCalendar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  }), \" Class Schedule\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/mentoring\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxBTkpJX1BST0pFQ1RTX0ZST05URU5EXFxPRUNGUk9OVEVORFxcY29tcG9uZW50c1xcc2lkZW5hdlxcc2lkZU5hdkxpbmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFQbUIiLCJmaWxlIjoiRDpcXEFOSklfUFJPSkVDVFNfRlJPTlRFTkRcXE9FQ0ZST05URU5EXFxjb21wb25lbnRzXFxzaWRlbmF2XFxzaWRlTmF2TGlua3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSBcIkBlbW90aW9uL2NvcmVcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XHJcbmltcG9ydCB7XHJcbiAgZmFDb2x1bW5zLFxyXG4gIGZhRmlsZUltcG9ydCxcclxuICBmYU5vdGVzTWVkaWNhbCxcclxuICBmYUJvb2ssXHJcbiAgZmFCZWxsLFxyXG4gIGZhVXNlcixcclxuICBmYUxpc3QsXHJcbiAgZmFJZEJhZGdlLFxyXG4gIGZhQ2FsZW5kYXIsXHJcbiAgZmFLZXlib2FyZCxcclxuICBmYUNoYXJ0QmFyLFxyXG4gIGZhUGhvbmUsXHJcbiAgZmFUaW50LFxyXG4gIGZhQ2hldnJvbkNpcmNsZVJpZ2h0LFxyXG4gIGZhQXJyb3dSaWdodCxcclxuICBmYUNoZXZyb25SaWdodCxcclxuICBmYVBlb3BsZUFycm93cyxcclxuICBmYUhhbmRQYXBlcixcclxuICBmYVBhcGVyY2xpcCxcclxuICBmYU5ld3NwYXBlcixcclxuICBmYUNlcnRpZmljYXRlLFxyXG4gIGZhRWRpdCxcclxuICBmYUdyYWR1YXRpb25DYXAsXHJcbiAgZmFDb21wcmVzc0Fycm93c0FsdCxcclxuICBmYUV4Y2hhbmdlQWx0LFxyXG4gIGZhUmVnaXN0ZXJlZCxcclxuICBmYU9iamVjdEdyb3VwLFxyXG4gIGZhTGF5ZXJHcm91cCxcclxuICBmYUFkZHJlc3NDYXJkLFxyXG59IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNpZGVOYXZMaW5rcyA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBbZHJvcE1lbnUsIHNldERyb3BNZW51XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbbWVudGVyTWVudSwgc2V0TWVudGVyTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2V4YW1NZW51LCBzZXRFeGFtTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3JlcG9ydHNNZW51LCBzZXRSZXBvcnRzTWVudV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZUFsbG9Db3VyY2VNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RHJvcE1lbnUoIWRyb3BNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZW1lbnRvck1lbnUgPSAoKSA9PiB7XHJcbiAgICBzZXRNZW50ZXJNZW51KCFtZW50ZXJNZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZUV4YW1NZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0RXhhbU1lbnUoIWV4YW1NZW51KTtcclxuICB9O1xyXG4gIGNvbnN0IHRvZ2dsZVJlcG9ydHNNZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0UmVwb3J0c01lbnUoIXJlcG9ydHNNZW51KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8dWxcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMTkwcHgpO1xyXG4gICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgICAgICAgIHBhZGRpbmc6IDEwcHggNDBweCAxMHB4IDQwcHg7XHJcbiAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgJiA+IGxpID4gYSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwcHg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7Q09MT1JTLkRBUktCT1JERVJ9O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEzcHg7XHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICBgfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2Rhc2hib2FyZFwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9kYXNoYm9hcmRcIj5cclxuICAgICAgICAgICAgPGE+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbHVtbnN9IC8+IERhc2hib2FyZFxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2ltcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaW1wb3J0c1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRmlsZUltcG9ydH0gLz4gSW1wb3J0c1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL25vdGlmaWNhdGlvbnNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbm90aWZpY2F0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQmVsbH0gLz4gTm90aWZpY2F0aW9uc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3Byb2ZpbGVcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcHJvZmlsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz4gUHJvZmlsZVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL2FsbG9jYXRlZC1jb3VyZWNlc1wiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2xlYXJmaXggY3Vyc29yLXBvaW50ZXJcIiBvbkNsaWNrPXt0b2dnbGVBbGxvQ291cmNlTWVudX0+XHJcbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMaXN0fSAvPiBBbGxvY2F0ZWQgQ291cnNlc1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgZHJvcE1lbnVcclxuICAgICAgICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIHtkcm9wTWVudSAmJiAoXHJcbiAgICAgICAgICAgIDx1bFxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTYgZm9udC1zYW5zIHRleHQtc21cIlxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgJiA+IGxpIHtcclxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUJvb2t9IC8+IEFsbG9jYXRlZCBDb3VyY2VzXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhUGVvcGxlQXJyb3dzfSAvPiBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhTmV3c3BhcGVyfSAvPiBNYXJrIEVudHJ5XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRWRpdH0gLz4gQXNzaWdubWVudCBDcmVhdGlvblxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jb3VyY2UtY29vcmRpbmF0b3ItYWxsb2NhdGlvblwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhSWRCYWRnZX0gLz4gQ291cmNlIENvb3JkaW5hdG9yIEFsbG9jYXRpb25cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9jbGFzcy1zY2hlZHVsZVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9jbGFzcy1zY2hlZHVsZVwiPlxyXG4gICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2FsZW5kYXJ9IC8+IENsYXNzIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvbWVudG9yaW5nXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZW1lbnRvck1lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhS2V5Ym9hcmR9IC8+IE1lbnRvcmluZ1xyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmbG9hdC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cclxuICAgICAgICAgICAgICAgIGljb249e2ZhQ2hldnJvblJpZ2h0fVxyXG4gICAgICAgICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgICAgICAgbWVudGVyTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge21lbnRlck1lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFHcmFkdWF0aW9uQ2FwfSAvPiBBc3NpZ25lZCBTdHVkZW50c1xyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNvbXByZXNzQXJyb3dzQWx0fSAvPiBEaXNjcmVwYW5jeVxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgIDxsaVxyXG4gICAgICAgICAgY3NzPXtcclxuICAgICAgICAgICAgcm91dGVyLnBhdGhuYW1lID09PSBcIi9leGFtLXNjaGVkdWxlXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGVhcmZpeCBjdXJzb3ItcG9pbnRlclwiIG9uQ2xpY2s9e3RvZ2dsZUV4YW1NZW51fT5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNhbGVuZGFyfSAvPiBFeGFtIFNjaGVkdWxlXHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxyXG4gICAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XHJcbiAgICAgICAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICAgICAgICBleGFtTWVudVxyXG4gICAgICAgICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAge2V4YW1NZW51ICYmIChcclxuICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtNiBmb250LXNhbnMgdGV4dC1zbVwiXHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAmID4gbGkge1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRXhjaGFuZ2VBbHR9IC8+IEV4YW0gSW52aWdpbGF0aW9uXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3JlcG9ydHNcIlxyXG4gICAgICAgICAgICAgID8gY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuR1JFRU59O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgIDogY3NzYFxyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHtDT0xPUlMuVEVYVEdSQVl9O1xyXG4gICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNsZWFyZml4IGN1cnNvci1wb2ludGVyXCIgb25DbGljaz17dG9nZ2xlUmVwb3J0c01lbnV9PlxyXG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hhcnRCYXJ9IC8+IFJlcG9ydHNcclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uXHJcbiAgICAgICAgICAgICAgICBpY29uPXtmYUNoZXZyb25SaWdodH1cclxuICAgICAgICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgICAgICAgIHJlcG9ydHNNZW51XHJcbiAgICAgICAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcyBlYXNlLWluLW91dDtcclxuICAgICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICB7cmVwb3J0c01lbnUgJiYgKFxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtbC02IGZvbnQtc2FucyB0ZXh0LXNtXCJcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgICYgPiBsaSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFSZWdpc3RlcmVkfSAvPiBDb3VyY2UgUmVnaXN0ZXJcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFMYXllckdyb3VwfSAvPiBDb3VyY2UgV2lzZSBBdHRlbmRhbmNlXHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQWRkcmVzc0NhcmR9IC8+IERheSBXaXNlIEF0dGVuZGFuY2VcclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgIGNzcz17XHJcbiAgICAgICAgICAgIHJvdXRlci5wYXRobmFtZSA9PT0gXCIvcXVlcnktZm9ybVwiXHJcbiAgICAgICAgICAgICAgPyBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5HUkVFTn07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgOiBjc3NgXHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5URVhUR1JBWX07XHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9xdWVyeS1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFQaG9uZX0gLz4gUXVlcnkgRm9ybVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjc3M9e1xyXG4gICAgICAgICAgICByb3V0ZXIucGF0aG5hbWUgPT09IFwiL3NraW5zXCJcclxuICAgICAgICAgICAgICA/IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLkdSRUVOfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICA6IGNzc2BcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlRFWFRHUkFZfTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGluayBocmVmPVwiL3NraW5zXCI+XHJcbiAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW50fSAvPiBTa2luc1xyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVOYXZMaW5rcztcclxuIl19 */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"a\", {\n    className: \"clearfix cursor-pointer\",\n    onClick: togglementorMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faKeyboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }), \" Mentoring\", ___EmotionJSX(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChevronRight,\n    css: menterMenu ? _ref4 : _ref5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }))), menterMenu && ___EmotionJSX(\"ul\", {\n    className: \"ml-6 font-sans text-sm\",\n    css: _ref6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faGraduationCap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }), \" Assigned Students\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCompressArrowsAlt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }), \" Discrepancy\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/exam-schedule\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"a\", {\n    className: \"clearfix cursor-pointer\",\n    onClick: toggleExamMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCalendar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }), \" Exam Schedule\", ___EmotionJSX(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChevronRight,\n    css: examMenu ? _ref7 : _ref8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 15\n    }\n  }))), examMenu && ___EmotionJSX(\"ul\", {\n    className: \"ml-6 font-sans text-sm\",\n    css: _ref9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faExchangeAlt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }\n  }), \" Exam Invigilation\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/reports\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"a\", {\n    className: \"clearfix cursor-pointer\",\n    onClick: toggleReportsMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChartBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }), \" Reports\", ___EmotionJSX(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faChevronRight,\n    css: reportsMenu ? _ref10 : _ref11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 15\n    }\n  }))), reportsMenu && ___EmotionJSX(\"ul\", {\n    className: \"ml-6 font-sans text-sm\",\n    css: _ref12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faRegistered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }\n  }), \" Cource Register\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faLayerGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }\n  }), \" Cource Wise Attendance\"), ___EmotionJSX(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faAddressCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 17\n    }\n  }), \" Day Wise Attendance\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/query-form\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/query-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faPhone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 15\n    }\n  }), \" Query Form\"))), ___EmotionJSX(\"li\", {\n    css: router.pathname === \"/skins\" ? /*#__PURE__*/css(\"color:\", COLORS.GREEN, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")) : /*#__PURE__*/css(\"color:\", COLORS.TEXTGRAY, \";;label:sidenav-SideNavLinks;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/skins\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faTint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 15\n    }\n  }), \" Skins\")))));\n};\n\nexport default SideNavLinks;","map":{"version":3,"sources":["D:/ANJI_PROJECTS_FRONTEND/OECFRONTEND/components/sidenav/sideNavLinks.js"],"names":["React","useState","css","Link","useRouter","COLORS","FontAwesomeIcon","faColumns","faFileImport","faNotesMedical","faBook","faBell","faUser","faList","faIdBadge","faCalendar","faKeyboard","faChartBar","faPhone","faTint","faChevronCircleRight","faArrowRight","faChevronRight","faPeopleArrows","faHandPaper","faPaperclip","faNewspaper","faCertificate","faEdit","faGraduationCap","faCompressArrowsAlt","faExchangeAlt","faRegistered","faObjectGroup","faLayerGroup","faAddressCard","SideNavLinks","router","dropMenu","setDropMenu","menterMenu","setMenterMenu","examMenu","setExamMenu","reportsMenu","setReportsMenu","toggleAlloCourceMenu","togglementorMenu","toggleExamMenu","toggleReportsMenu","TEXTGRAY","DARKBORDER","GREEN","pathname"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/router\";\r\nimport { COLORS } from \"../../constants\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faColumns,\r\n  faFileImport,\r\n  faNotesMedical,\r\n  faBook,\r\n  faBell,\r\n  faUser,\r\n  faList,\r\n  faIdBadge,\r\n  faCalendar,\r\n  faKeyboard,\r\n  faChartBar,\r\n  faPhone,\r\n  faTint,\r\n  faChevronCircleRight,\r\n  faArrowRight,\r\n  faChevronRight,\r\n  faPeopleArrows,\r\n  faHandPaper,\r\n  faPaperclip,\r\n  faNewspaper,\r\n  faCertificate,\r\n  faEdit,\r\n  faGraduationCap,\r\n  faCompressArrowsAlt,\r\n  faExchangeAlt,\r\n  faRegistered,\r\n  faObjectGroup,\r\n  faLayerGroup,\r\n  faAddressCard,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SideNavLinks = () => {\r\n  const router = useRouter();\r\n  const [dropMenu, setDropMenu] = useState(false);\r\n  const [menterMenu, setMenterMenu] = useState(false);\r\n  const [examMenu, setExamMenu] = useState(false);\r\n  const [reportsMenu, setReportsMenu] = useState(false);\r\n\r\n  const toggleAlloCourceMenu = () => {\r\n    setDropMenu(!dropMenu);\r\n  };\r\n  const togglementorMenu = () => {\r\n    setMenterMenu(!menterMenu);\r\n  };\r\n  const toggleExamMenu = () => {\r\n    setExamMenu(!examMenu);\r\n  };\r\n  const toggleReportsMenu = () => {\r\n    setReportsMenu(!reportsMenu);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ul\r\n        css={css`\r\n          height: calc(100% - 190px);\r\n          overflow-y: auto;\r\n          overflow-x: hidden;\r\n          padding: 10px 40px 10px 40px;\r\n          color: ${COLORS.TEXTGRAY};\r\n          & > li > a {\r\n            padding: 8px 0px;\r\n            display: block;\r\n\r\n            border-bottom: 1px solid ${COLORS.DARKBORDER};\r\n            font-size: 13px;\r\n            &:hover {\r\n              color: ${COLORS.GREEN};\r\n            }\r\n          }\r\n        `}\r\n      >\r\n        <li\r\n          css={\r\n            router.pathname === \"/dashboard\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/dashboard\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faColumns} /> Dashboard\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/imports\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/imports\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faFileImport} /> Imports\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/notifications\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/notifications\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faBell} /> Notifications\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/profile\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/profile\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faUser} /> Profile\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/allocated-coureces\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <a className=\"clearfix cursor-pointer\" onClick={toggleAlloCourceMenu}>\r\n            <FontAwesomeIcon icon={faList} /> Allocated Courses\r\n            <span className=\"float-right\">\r\n              <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                css={\r\n                  dropMenu\r\n                    ? css`\r\n                        transform: rotate(90deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                    : css`\r\n                        transform: rotate(0deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                }\r\n              />\r\n            </span>\r\n          </a>\r\n          {dropMenu && (\r\n            <ul\r\n              className=\"ml-6 font-sans text-sm\"\r\n              css={css`\r\n                & > li {\r\n                  padding: 4px 0px;\r\n                }\r\n              `}\r\n            >\r\n              <li>\r\n                <FontAwesomeIcon icon={faBook} /> Allocated Cources\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faPeopleArrows} /> Attendance\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faNewspaper} /> Mark Entry\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faEdit} /> Assignment Creation\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/cource-coordinator-allocation\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/cource-coordinator-allocation\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faIdBadge} /> Cource Coordinator Allocation\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/class-schedule\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/class-schedule\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faCalendar} /> Class Schedule\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/mentoring\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <a className=\"clearfix cursor-pointer\" onClick={togglementorMenu}>\r\n            <FontAwesomeIcon icon={faKeyboard} /> Mentoring\r\n            <span className=\"float-right\">\r\n              <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                css={\r\n                  menterMenu\r\n                    ? css`\r\n                        transform: rotate(90deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                    : css`\r\n                        transform: rotate(0deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                }\r\n              />\r\n            </span>\r\n          </a>\r\n          {menterMenu && (\r\n            <ul\r\n              className=\"ml-6 font-sans text-sm\"\r\n              css={css`\r\n                & > li {\r\n                  padding: 4px 0px;\r\n                }\r\n              `}\r\n            >\r\n              <li>\r\n                <FontAwesomeIcon icon={faGraduationCap} /> Assigned Students\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faCompressArrowsAlt} /> Discrepancy\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/exam-schedule\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <a className=\"clearfix cursor-pointer\" onClick={toggleExamMenu}>\r\n            <FontAwesomeIcon icon={faCalendar} /> Exam Schedule\r\n            <span className=\"float-right\">\r\n              <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                css={\r\n                  examMenu\r\n                    ? css`\r\n                        transform: rotate(90deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                    : css`\r\n                        transform: rotate(0deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                }\r\n              />\r\n            </span>\r\n          </a>\r\n          {examMenu && (\r\n            <ul\r\n              className=\"ml-6 font-sans text-sm\"\r\n              css={css`\r\n                & > li {\r\n                  padding: 4px 0px;\r\n                }\r\n              `}\r\n            >\r\n              <li>\r\n                <FontAwesomeIcon icon={faExchangeAlt} /> Exam Invigilation\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/reports\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <a className=\"clearfix cursor-pointer\" onClick={toggleReportsMenu}>\r\n            <FontAwesomeIcon icon={faChartBar} /> Reports\r\n            <span className=\"float-right\">\r\n              <FontAwesomeIcon\r\n                icon={faChevronRight}\r\n                css={\r\n                  reportsMenu\r\n                    ? css`\r\n                        transform: rotate(90deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                    : css`\r\n                        transform: rotate(0deg);\r\n                        transition: all 0.1s ease-in-out;\r\n                      `\r\n                }\r\n              />\r\n            </span>\r\n          </a>\r\n          {reportsMenu && (\r\n            <ul\r\n              className=\"ml-6 font-sans text-sm\"\r\n              css={css`\r\n                & > li {\r\n                  padding: 4px 0px;\r\n                }\r\n              `}\r\n            >\r\n              <li>\r\n                <FontAwesomeIcon icon={faRegistered} /> Cource Register\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faLayerGroup} /> Cource Wise Attendance\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon icon={faAddressCard} /> Day Wise Attendance\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/query-form\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/query-form\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faPhone} /> Query Form\r\n            </a>\r\n          </Link>\r\n        </li>\r\n\r\n        <li\r\n          css={\r\n            router.pathname === \"/skins\"\r\n              ? css`\r\n                  color: ${COLORS.GREEN};\r\n                `\r\n              : css`\r\n                  color: ${COLORS.TEXTGRAY};\r\n                `\r\n          }\r\n        >\r\n          <Link href=\"/skins\">\r\n            <a>\r\n              <FontAwesomeIcon icon={faTint} /> Skins\r\n            </a>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SideNavLinks;\r\n"]},"metadata":{},"sourceType":"module"}